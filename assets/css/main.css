(function ($) {

  "use strict";

  $(window).on('load', function () {

    /* 
   MixitUp
   ========================================================================== */
    $('#portfolio').mixItUp();

    /* 
     One Page Navigation & wow js
     ========================================================================== */
    var OnePNav = $('.onepage-nev');
    var top_offset = OnePNav.height() - -0;
    OnePNav.onePageNav({
      currentClass: 'active',
      scrollOffset: top_offset,
    });

    /*Page Loader active
      ========================================================*/

    /*PRELOADER JS*/
    $('.spinner').fadeOut();
    $('.preloader').delay(350).fadeOut('slow');
    /*END PRELOADER JS*/

    /*START MENU JS*/
    if ($(window).scrollTop() > 200) {
      $('.fixed-top').addClass('menu-bg');
    } else {
      $('.fixed-top').removeClass('menu-bg');
    }
    $(window).on('scroll', function () {
      if ($(window).scrollTop() > 100) {
        $('.site-navigation, .header-white, .header').addClass('navbar-fixed');
      } else {
        $('.site-navigation, .header-white, .header').removeClass('navbar-fixed');
      }
    });
    /*END MENU JS*/

    /* WOW Scroll Spy
  ========================================================*/
    var wow = new WOW({
      //disabled for mobile
      mobile: false
    });

    wow.init();

    /* Nivo Lightbox 
    ========================================================*/
    $('.lightbox').nivoLightbox({
      effect: 'fadeScale',
      keyboardNav: true,
    });

    /* Counter
    ========================================================*/
    $('.counterUp').counterUp({
      delay: 20,
      time: 3000
    });

    /* Tesimonial
     ========================================================*/
    $(".carousel-testimony").owlCarousel({
      loop: true,
      navText: false,
      autoplay: true,
      items: 1,
      slideSpeed: 5000,
      responsive: {
        0: {
          items: 1
        },
        768: {
          items: 1
        },
        979: {
          items: 1
        },
        1000: {
          items: 1
        }
      }
    });


    /* Back Top Link active
    ========================================================*/
    var offset = 200;
    var duration = 500;
    $(window).scroll(function () {
      if ($(this).scrollTop() > offset) {
        $('.back-to-top').fadeIn(400);
      } else {
        $('.back-to-top').fadeOut(400);
      }
    });

    $('.back-to-top').on('click', function (event) {
      event.preventDefault();
      $('html, body').animate({
        scrollTop: 0
      }, 600);
      return false;
    });



  });

}(jQuery));


jQuery(document).ready(function ($) {
  //set animation timing
  var animationDelay = 2500,
    //loading bar effect
    barAnimationDelay = 3800,
    barWaiting = barAnimationDelay - 3000, //3000 is the duration of the transition on the loading bar - set in the scss/css file
    //letters effect
    lettersDelay = 50,
    //type effect
    typeLettersDelay = 150,
    selectionDuration = 500,
    typeAnimationDelay = selectionDuration + 800,
    //clip effect 
    revealDuration = 800,
    revealAnimationDelay = 1500;

  initHeadline();


  function initHeadline() {
    //insert <i> element for each letter of a changing word
    singleLetters($('.cd-headline.letters').find('b'));
    //initialise headline animation
    animateHeadline($('.cd-headline'));
  }

  function singleLetters($words) {
    $words.each(function () {
      var word = $(this),
        letters = word.text().split(''),
        selected = word.hasClass('is-visible');
      for (i in letters) {
        if (word.parents('.rotate-2').length > 0) letters[i] = '<em>' + letters[i] + '</em>';
        letters[i] = (selected) ? '<i class="in">' + letters[i] + '</i>' : '<i>' + letters[i] + '</i>';
      }
      var newLetters = letters.join('');
      word.html(newLetters).css('opacity', 1);
    });
  }

  function animateHeadline($headlines) {
    var duration = animationDelay;
    $headlines.each(function () {
      var headline = $(this);

      if (headline.hasClass('loading-bar')) {
        duration = barAnimationDelay;
        setTimeout(function () { headline.find('.cd-words-wrapper').addClass('is-loading') }, barWaiting);
      } else if (headline.hasClass('clip')) {
        var spanWrapper = headline.find('.cd-words-wrapper'),
          newWidth = spanWrapper.width() + 10
        spanWrapper.css('width', newWidth);
      } else if (!headline.hasClass('type')) {
        //assign to .cd-words-wrapper the width of its longest word
        var words = headline.find('.cd-words-wrapper b'),
          width = 0;
        words.each(function () {
          var wordWidth = $(this).width();
          if (wordWidth > width) width = wordWidth;
        });
        headline.find('.cd-words-wrapper').css('width', width);
      };

      //trigger animation
      setTimeout(function () { hideWord(headline.find('.is-visible').eq(0)) }, duration);
    });
  }

  function hideWord($word) {
    var nextWord = takeNext($word);

    if ($word.parents('.cd-headline').hasClass('type')) {
      var parentSpan = $word.parent('.cd-words-wrapper');
      parentSpan.addClass('selected').removeClass('waiting');
      setTimeout(function () {
        parentSpan.removeClass('selected');
        $word.removeClass('is-visible').addClass('is-hidden').children('i').removeClass('in').addClass('out');
      }, selectionDuration);
      setTimeout(function () { showWord(nextWord, typeLettersDelay) }, typeAnimationDelay);

    } else if ($word.parents('.cd-headline').hasClass('letters')) {
      var bool = ($word.children('i').length >= nextWord.children('i').length) ? true : false;
      hideLetter($word.find('i').eq(0), $word, bool, lettersDelay);
      showLetter(nextWord.find('i').eq(0), nextWord, bool, lettersDelay);

    } else if ($word.parents('.cd-headline').hasClass('clip')) {
      $word.parents('.cd-words-wrapper').animate({ width: '2px' }, revealDuration, function () {
        switchWord($word, nextWord);
        showWord(nextWord);
      });

    } else if ($word.parents('.cd-headline').hasClass('loading-bar')) {
      $word.parents('.cd-words-wrapper').removeClass('is-loading');
      switchWord($word, nextWord);
      setTimeout(function () { hideWord(nextWord) }, barAnimationDelay);
      setTimeout(function () { $word.parents('.cd-words-wrapper').addClass('is-loading') }, barWaiting);

    } else {
      switchWord($word, nextWord);
      setTimeout(function () { hideWord(nextWord) }, animationDelay);
    }
  }

  function showWord($word, $duration) {
    if ($word.parents('.cd-headline').hasClass('type')) {
      showLetter($word.find('i').eq(0), $word, false, $duration);
      $word.addClass('is-visible').removeClass('is-hidden');

    } else if ($word.parents('.cd-headline').hasClass('clip')) {
      $word.parents('.cd-words-wrapper').animate({ 'width': $word.width() + 10 }, revealDuration, function () {
        setTimeout(function () { hideWord($word) }, revealAnimationDelay);
      });
    }
  }

  function hideLetter($letter, $word, $bool, $duration) {
    $letter.removeClass('in').addClass('out');

    if (!$letter.is(':last-child')) {
      setTimeout(function () { hideLetter($letter.next(), $word, $bool, $duration); }, $duration);
    } else if ($bool) {
      setTimeout(function () { hideWord(takeNext($word)) }, animationDelay);
    }

    if ($letter.is(':last-child') && $('html').hasClass('no-csstransitions')) {
      var nextWord = takeNext($word);
      switchWord($word, nextWord);
    }
  }

  function showLetter($letter, $word, $bool, $duration) {
    $letter.addClass('in').removeClass('out');

    if (!$letter.is(':last-child')) {
      setTimeout(function () { showLetter($letter.next(), $word, $bool, $duration); }, $duration);
    } else {
      if ($word.parents('.cd-headline').hasClass('type')) { setTimeout(function () { $word.parents('.cd-words-wrapper').addClass('waiting'); }, 200); }
      if (!$bool) { setTimeout(function () { hideWord($word) }, animationDelay) }
    }
  }

  function takeNext($word) {
    return (!$word.is(':last-child')) ? $word.next() : $word.parent().children().eq(0);
  }

  function takePrev($word) {
    return (!$word.is(':first-child')) ? $word.prev() : $word.parent().children().last();
  }

  function switchWord($oldWord, $newWord) {
    $oldWord.removeClass('is-visible').addClass('is-hidden');
    $newWord.removeClass('is-hidden').addClass('is-visible');
  }
});


// JavaScript contact form Document
$(document).ready(function () {
  $('form#contact-form').submit(function () {
    $('form#contact-form .error').remove();
    var hasError = false;
    $('.requiredField').each(function () {
      if (jQuery.trim($(this).val()) == '') {
        var labelText = $(this).prev('label').text();
        $(this).parent().append('<span class="error">You forgot to enter your ' + labelText + '</span>');
        $(this).addClass('inputError');
        hasError = true;
      } else if ($(this).hasClass('email')) {
        var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
        if (!emailReg.test(jQuery.trim($(this).val()))) {
          var labelText = $(this).prev('label').text();
          $(this).parent().append('<span class="error">You entered an invalid ' + labelText + '</span>');
          $(this).addClass('inputError');
          hasError = true;
        }
      }
    });
    if (!hasError) {
      $('form#contact-form input.submit').fadeOut('normal', function () {
        $(this).parent().append('');
      });

      $("#loader").show();
      $.ajax({
        url: "contact.php",
        type: "POST",
        data: new FormData(this),
        contentType: false,
        cache: false,
        processData: false,
        success: function (data) {
          $('form#contact-form').slideUp("fast", function () {
            $(this).before('<div class="success">Thank you. Your Email was sent successfully.</div>');
            $("#loader").hide();
          })
        }
      });

      return false;
    }

  });
});


* /(function(e){"use strict";e.fn.counterUp=function(t){var n=e.extend({time:400,delay:10},t);return this.each(function(){var t=e(this),r=n,i=function(){var e=[],n=r.time/r.delay, i = t.text(), s = /[0-9]+,[0-9]+/.test(i); i = i.replace(/,/g, ""); var o = /^[0-9]+$/.test(i), u = /^[0-9]+\.[0-9]+$/.test(i), a = u ? (i.split(".")[1] || []).length : 0; for (var f = n; f >= 1; f--) { var l = parseInt(i / n * f); u && (l = parseFloat(i / n * f).toFixed(a)); if (s) while (/(\d+)(\d{3})/.test(l.toString())) l = l.toString().replace(/(\d+)(\d{3})/, "$1,$2"); e.unshift(l) } t.data("counterup-nums", e); t.text("0"); var c = function () { t.text(t.data("counterup-nums").shift()); if (t.data("counterup-nums").length) setTimeout(t.data("counterup-func"), r.delay); else { delete t.data("counterup-nums"); t.data("counterup-nums", null); t.data("counterup-func", null) } }; t.data("counterup-func", c); setTimeout(t.data("counterup-func"), r.delay)}; t.waypoint(i, { offset: "100%", triggerOnce: !0 })})}}) (jQuery);


jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend(jQuery.easing,
  {
    def: 'easeOutQuad',
    swing: function (x, t, b, c, d) {
      //alert(jQuery.easing.default);
      return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
    },
    easeInQuad: function (x, t, b, c, d) {
      return c * (t /= d) * t + b;
    },
    easeOutQuad: function (x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    },
    easeInOutQuad: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t + b;
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    },
    easeInCubic: function (x, t, b, c, d) {
      return c * (t /= d) * t * t + b;
    },
    easeOutCubic: function (x, t, b, c, d) {
      return c * ((t = t / d - 1) * t * t + 1) + b;
    },
    easeInOutCubic: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    },
    easeInQuart: function (x, t, b, c, d) {
      return c * (t /= d) * t * t * t + b;
    },
    easeOutQuart: function (x, t, b, c, d) {
      return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },
    easeInOutQuart: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    },
    easeInQuint: function (x, t, b, c, d) {
      return c * (t /= d) * t * t * t * t + b;
    },
    easeOutQuint: function (x, t, b, c, d) {
      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    easeInOutQuint: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    },
    easeInSine: function (x, t, b, c, d) {
      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    },
    easeOutSine: function (x, t, b, c, d) {
      return c * Math.sin(t / d * (Math.PI / 2)) + b;
    },
    easeInOutSine: function (x, t, b, c, d) {
      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInExpo: function (x, t, b, c, d) {
      return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
    },
    easeOutExpo: function (x, t, b, c, d) {
      return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },
    easeInOutExpo: function (x, t, b, c, d) {
      if (t == 0) return b;
      if (t == d) return b + c;
      if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function (x, t, b, c, d) {
      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    easeOutCirc: function (x, t, b, c, d) {
      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    },
    easeInOutCirc: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    },
    easeInElastic: function (x, t, b, c, d) {
      var s = 1.70158; var p = 0; var a = c;
      if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
      if (a < Math.abs(c)) { a = c; var s = p / 4; }
      else var s = p / (2 * Math.PI) * Math.asin(c / a);
      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },
    easeOutElastic: function (x, t, b, c, d) {
      var s = 1.70158; var p = 0; var a = c;
      if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
      if (a < Math.abs(c)) { a = c; var s = p / 4; }
      else var s = p / (2 * Math.PI) * Math.asin(c / a);
      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },
    easeInOutElastic: function (x, t, b, c, d) {
      var s = 1.70158; var p = 0; var a = c;
      if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5);
      if (a < Math.abs(c)) { a = c; var s = p / 4; }
      else var s = p / (2 * Math.PI) * Math.asin(c / a);
      if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
    },
    easeInBack: function (x, t, b, c, d, s) {
      if (s == undefined) s = 1.70158;
      return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },
    easeOutBack: function (x, t, b, c, d, s) {
      if (s == undefined) s = 1.70158;
      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    easeInOutBack: function (x, t, b, c, d, s) {
      if (s == undefined) s = 1.70158;
      if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
    },
    easeInBounce: function (x, t, b, c, d) {
      return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
    },
    easeOutBounce: function (x, t, b, c, d) {
      if ((t /= d) < (1 / 2.75)) {
        return c * (7.5625 * t * t) + b;
      } else if (t < (2 / 2.75)) {
        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
      } else if (t < (2.5 / 2.75)) {
        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
      } else {
        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
      }
    },
    easeInOutBounce: function (x, t, b, c, d) {
      if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
      return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
    }
  });



(function ($, undf) {
  'use strict';

  /**
   * MixItUp Constructor Function
   * @constructor
   * @extends jQuery
   */

  $.MixItUp = function () {
    var self = this;

    self._execAction('_constructor', 0);

    $.extend(self, {

      /* Public Properties
      ---------------------------------------------------------------------- */

      selectors: {
        target: '.mix',
        filter: '.filter',
        sort: '.sort'
      },

      animation: {
        enable: true,
        effects: 'fade scale',
        duration: 600,
        easing: 'ease',
        perspectiveDistance: '3000',
        perspectiveOrigin: '50% 50%',
        queue: true,
        queueLimit: 1,
        animateChangeLayout: false,
        animateResizeContainer: true,
        animateResizeTargets: false,
        staggerSequence: false,
        reverseOut: false
      },

      callbacks: {
        onMixLoad: false,
        onMixStart: false,
        onMixBusy: false,
        onMixEnd: false,
        onMixFail: false,
        _user: false
      },

      controls: {
        enable: true,
        live: false,
        toggleFilterButtons: false,
        toggleLogic: 'or',
        activeClass: 'active'
      },

      layout: {
        display: 'inline-block',
        containerClass: '',
        containerClassFail: 'fail'
      },

      load: {
        filter: 'all',
        sort: false
      },

      /* Private Properties
      ---------------------------------------------------------------------- */

      _$body: null,
      _$container: null,
      _$targets: null,
      _$parent: null,
      _$sortButtons: null,
      _$filterButtons: null,

      _suckMode: false,
      _mixing: false,
      _sorting: false,
      _clicking: false,
      _loading: true,
      _changingLayout: false,
      _changingClass: false,
      _changingDisplay: false,

      _origOrder: [],
      _startOrder: [],
      _newOrder: [],
      _activeFilter: null,
      _toggleArray: [],
      _toggleString: '',
      _activeSort: 'default:asc',
      _newSort: null,
      _startHeight: null,
      _newHeight: null,
      _incPadding: true,
      _newDisplay: null,
      _newClass: null,
      _targetsBound: 0,
      _targetsDone: 0,
      _queue: [],

      _$show: $(),
      _$hide: $()
    });

    self._execAction('_constructor', 1);
  };

  /**
   * MixItUp Prototype
   * @override
   */

  $.MixItUp.prototype = {
    constructor: $.MixItUp,

    /* Static Properties
    ---------------------------------------------------------------------- */

    _instances: {},
    _handled: {
      _filter: {},
      _sort: {}
    },
    _bound: {
      _filter: {},
      _sort: {}
    },
    _actions: {},
    _filters: {},

    /* Static Methods
    ---------------------------------------------------------------------- */

    /**
     * Extend
     * @since 2.1.0
     * @param {object} new properties/methods
     * @extends {object} prototype
     */

    extend: function (extension) {
      for (var key in extension) {
        $.MixItUp.prototype[key] = extension[key];
      }
    },

    /**
     * Add Action
     * @since 2.1.0
     * @param {string} hook name
     * @param {string} namespace
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._actions
     */

    addAction: function (hook, name, func, priority) {
      $.MixItUp.prototype._addHook('_actions', hook, name, func, priority);
    },

    /**
     * Add Filter
     * @since 2.1.0
     * @param {string} hook name
     * @param {string} namespace
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._filters
     */

    addFilter: function (hook, name, func, priority) {
      $.MixItUp.prototype._addHook('_filters', hook, name, func, priority);
    },

    /**
     * Add Hook
     * @since 2.1.0
     * @param {string} type of hook
     * @param {string} hook name
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._filters
     */

    _addHook: function (type, hook, name, func, priority) {
      var collection = $.MixItUp.prototype[type],
        obj = {};

      priority = (priority === 1 || priority === 'post') ? 'post' : 'pre';

      obj[hook] = {};
      obj[hook][priority] = {};
      obj[hook][priority][name] = func;

      $.extend(true, collection, obj);
    },


    /* Private Methods
    ---------------------------------------------------------------------- */

    /**
     * Initialise
     * @since 2.0.0
     * @param {object} domNode
     * @param {object} config
     */

    _init: function (domNode, config) {
      var self = this;

      self._execAction('_init', 0, arguments);

      config && $.extend(true, self, config);

      self._$body = $('body');
      self._domNode = domNode;
      self._$container = $(domNode);
      self._$container.addClass(self.layout.containerClass);
      self._id = domNode.id;

      self._platformDetect();

      self._brake = self._getPrefixedCSS('transition', 'none');

      self._refresh(true);

      self._$parent = self._$targets.parent().length ? self._$targets.parent() : self._$container;

      if (self.load.sort) {
        self._newSort = self._parseSort(self.load.sort);
        self._newSortString = self.load.sort;
        self._activeSort = self.load.sort;
        self._sort();
        self._printSort();
      }

      self._activeFilter = self.load.filter === 'all' ?
        self.selectors.target :
        self.load.filter === 'none' ?
          '' :
          self.load.filter;

      self.controls.enable && self._bindHandlers();

      if (self.controls.toggleFilterButtons) {
        self._buildToggleArray();

        for (var i = 0; i < self._toggleArray.length; i++) {
          self._updateControls({ filter: self._toggleArray[i], sort: self._activeSort }, true);
        };
      } else if (self.controls.enable) {
        self._updateControls({ filter: self._activeFilter, sort: self._activeSort });
      }

      self._filter();

      self._init = true;

      self._$container.data('mixItUp', self);

      self._execAction('_init', 1, arguments);

      self._buildState();

      self._$targets.css(self._brake);

      self._goMix(self.animation.enable);
    },

    /**
     * Platform Detect
     * @since 2.0.0
     */

    _platformDetect: function () {
      var self = this,
        vendorsTrans = ['Webkit', 'Moz', 'O', 'ms'],
        vendorsRAF = ['webkit', 'moz'],
        chrome = window.navigator.appVersion.match(/Chrome\/(\d+)\./) || false,
        ff = typeof InstallTrigger !== 'undefined',
        prefix = function (el) {
          for (var i = 0; i < vendorsTrans.length; i++) {
            if (vendorsTrans[i] + 'Transition' in el.style) {
              return {
                prefix: '-' + vendorsTrans[i].toLowerCase() + '-',
                vendor: vendorsTrans[i]
              };
            };
          };
          return 'transition' in el.style ? '' : false;
        },
        transPrefix = prefix(self._domNode);

      self._execAction('_platformDetect', 0);

      self._chrome = chrome ? parseInt(chrome[1], 10) : false;
      self._ff = ff ? parseInt(window.navigator.userAgent.match(/rv:([^)]+)\)/)[1]) : false;
      self._prefix = transPrefix.prefix;
      self._vendor = transPrefix.vendor;
      self._suckMode = window.atob && self._prefix ? false : true;

      self._suckMode && (self.animation.enable = false);
      (self._ff && self._ff <= 4) && (self.animation.enable = false);

      /* Polyfills
      ---------------------------------------------------------------------- */

      /**
       * window.requestAnimationFrame
       */

      for (var x = 0; x < vendorsRAF.length && !window.requestAnimationFrame; x++) {
        window.requestAnimationFrame = window[vendorsRAF[x] + 'RequestAnimationFrame'];
      }

      /**
       * Object.getPrototypeOf
       */

      if (typeof Object.getPrototypeOf !== 'function') {
        if (typeof 'test'.__proto__ === 'object') {
          Object.getPrototypeOf = function (object) {
            return object.__proto__;
          };
        } else {
          Object.getPrototypeOf = function (object) {
            return object.constructor.prototype;
          };
        }
      }

      /**
       * Element.nextElementSibling
       */

      if (self._domNode.nextElementSibling === undf) {
        Object.defineProperty(Element.prototype, 'nextElementSibling', {
          get: function () {
            var el = this.nextSibling;

            while (el) {
              if (el.nodeType === 1) {
                return el;
              }
              el = el.nextSibling;
            }
            return null;
          }
        });
      }

      self._execAction('_platformDetect', 1);
    },

    /**
     * Refresh
     * @since 2.0.0
     * @param {boolean} init
     * @param {boolean} force
     */

    _refresh: function (init, force) {
      var self = this;

      self._execAction('_refresh', 0, arguments);

      self._$targets = self._$container.find(self.selectors.target);

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        if (target.dataset === undf || force) {

          target.dataset = {};

          for (var j = 0; j < target.attributes.length; j++) {

            var attr = target.attributes[j],
              name = attr.name,
              val = attr.value;

            if (name.indexOf('data-') > -1) {
              var dataName = self._helpers._camelCase(name.substring(5, name.length));
              target.dataset[dataName] = val;
            }
          }
        }

        if (target.mixParent === undf) {
          target.mixParent = self._id;
        }
      }

      if (
        (self._$targets.length && init) ||
        (!self._origOrder.length && self._$targets.length)
      ) {
        self._origOrder = [];

        for (var i = 0; i < self._$targets.length; i++) {
          var target = self._$targets[i];

          self._origOrder.push(target);
        }
      }

      self._execAction('_refresh', 1, arguments);
    },

    /**
     * Bind Handlers
     * @since 2.0.0
     */

    _bindHandlers: function () {
      var self = this,
        filters = $.MixItUp.prototype._bound._filter,
        sorts = $.MixItUp.prototype._bound._sort;

      self._execAction('_bindHandlers', 0);

      if (self.controls.live) {
        self._$body
          .on('click.mixItUp.' + self._id, self.selectors.sort, function () {
            self._processClick($(this), 'sort');
          })
          .on('click.mixItUp.' + self._id, self.selectors.filter, function () {
            self._processClick($(this), 'filter');
          });
      } else {
        self._$sortButtons = $(self.selectors.sort);
        self._$filterButtons = $(self.selectors.filter);

        self._$sortButtons.on('click.mixItUp.' + self._id, function () {
          self._processClick($(this), 'sort');
        });

        self._$filterButtons.on('click.mixItUp.' + self._id, function () {
          self._processClick($(this), 'filter');
        });
      }

      filters[self.selectors.filter] = (filters[self.selectors.filter] === undf) ? 1 : filters[self.selectors.filter] + 1;
      sorts[self.selectors.sort] = (sorts[self.selectors.sort] === undf) ? 1 : sorts[self.selectors.sort] + 1;

      self._execAction('_bindHandlers', 1);
    },

    /**
     * Process Click
     * @since 2.0.0
     * @param {object} $button
     * @param {string} type
     */

    _processClick: function ($button, type) {
      var self = this,
        trackClick = function ($button, type, off) {
          var proto = $.MixItUp.prototype;

          proto._handled['_' + type][self.selectors[type]] = (proto._handled['_' + type][self.selectors[type]] === undf) ?
            1 :
            proto._handled['_' + type][self.selectors[type]] + 1;

          if (proto._handled['_' + type][self.selectors[type]] === proto._bound['_' + type][self.selectors[type]]) {
            $button[(off ? 'remove' : 'add') + 'Class'](self.controls.activeClass);
            delete proto._handled['_' + type][self.selectors[type]];
          }
        };

      self._execAction('_processClick', 0, arguments);

      if (!self._mixing || (self.animation.queue && self._queue.length < self.animation.queueLimit)) {
        self._clicking = true;

        if (type === 'sort') {
          var sort = $button.attr('data-sort');

          if (!$button.hasClass(self.controls.activeClass) || sort.indexOf('random') > -1) {
            $(self.selectors.sort).removeClass(self.controls.activeClass);
            trackClick($button, type);
            self.sort(sort);
          }
        }

        if (type === 'filter') {
          var filter = $button.attr('data-filter'),
            ndx,
            seperator = self.controls.toggleLogic === 'or' ? ',' : '';

          if (!self.controls.toggleFilterButtons) {
            if (!$button.hasClass(self.controls.activeClass)) {
              $(self.selectors.filter).removeClass(self.controls.activeClass);
              trackClick($button, type);
              self.filter(filter);
            }
          } else {
            self._buildToggleArray();

            if (!$button.hasClass(self.controls.activeClass)) {
              trackClick($button, type);

              self._toggleArray.push(filter);
            } else {
              trackClick($button, type, true);
              ndx = self._toggleArray.indexOf(filter);
              self._toggleArray.splice(ndx, 1);
            }

            self._toggleArray = $.grep(self._toggleArray, function (n) { return (n); });

            self._toggleString = self._toggleArray.join(seperator);

            self.filter(self._toggleString);
          }
        }

        self._execAction('_processClick', 1, arguments);
      } else {
        if (typeof self.callbacks.onMixBusy === 'function') {
          self.callbacks.onMixBusy.call(self._domNode, self._state, self);
        }
        self._execAction('_processClickBusy', 1, arguments);
      }
    },

    /**
     * Build Toggle Array
     * @since 2.0.0
     */

    _buildToggleArray: function () {
      var self = this,
        activeFilter = self._activeFilter.replace(/\s/g, '');

      self._execAction('_buildToggleArray', 0, arguments);

      if (self.controls.toggleLogic === 'or') {
        self._toggleArray = activeFilter.split(',');
      } else {
        self._toggleArray = activeFilter.split('.');

        !self._toggleArray[0] && self._toggleArray.shift();

        for (var i = 0, filter; filter = self._toggleArray[i]; i++) {
          self._toggleArray[i] = '.' + filter;
        }
      }

      self._execAction('_buildToggleArray', 1, arguments);
    },

    /**
     * Update Controls
     * @since 2.0.0
     * @param {object} command
     * @param {boolean} multi
     */

    _updateControls: function (command, multi) {
      var self = this,
        output = {
          filter: command.filter,
          sort: command.sort
        },
        update = function ($el, filter) {
          try {
            (multi && type === 'filter' && !(output.filter === 'none' || output.filter === '')) ?
              $el.filter(filter).addClass(self.controls.activeClass) :
              $el.removeClass(self.controls.activeClass).filter(filter).addClass(self.controls.activeClass);
          } catch (e) { }
        },
        type = 'filter',
        $el = null;

      self._execAction('_updateControls', 0, arguments);

      (command.filter === undf) && (output.filter = self._activeFilter);
      (command.sort === undf) && (output.sort = self._activeSort);
      (output.filter === self.selectors.target) && (output.filter = 'all');

      for (var i = 0; i < 2; i++) {
        $el = self.controls.live ? $(self.selectors[type]) : self['_$' + type + 'Buttons'];
        $el && update($el, '[data-' + type + '="' + output[type] + '"]');
        type = 'sort';
      }

      self._execAction('_updateControls', 1, arguments);
    },

    /**
     * Filter (private)
     * @since 2.0.0
     */

    _filter: function () {
      var self = this;

      self._execAction('_filter', 0);

      for (var i = 0; i < self._$targets.length; i++) {
        var $target = $(self._$targets[i]);

        if ($target.is(self._activeFilter)) {
          self._$show = self._$show.add($target);
        } else {
          self._$hide = self._$hide.add($target);
        }
      }

      self._execAction('_filter', 1);
    },

    /**
     * Sort (private)
     * @since 2.0.0
     */

    _sort: function () {
      var self = this,
        arrayShuffle = function (oldArray) {
          var newArray = oldArray.slice(),
            len = newArray.length,
            i = len;

          while (i--) {
            var p = parseInt(Math.random() * len);
            var t = newArray[i];
            newArray[i] = newArray[p];
            newArray[p] = t;
          };
          return newArray;
        };

      self._execAction('_sort', 0);

      self._startOrder = [];

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        self._startOrder.push(target);
      }

      switch (self._newSort[0].sortBy) {
        case 'default':
          self._newOrder = self._origOrder;
          break;
        case 'random':
          self._newOrder = arrayShuffle(self._startOrder);
          break;
        case 'custom':
          self._newOrder = self._newSort[0].order;
          break;
        default:
          self._newOrder = self._startOrder.concat().sort(function (a, b) {
            return self._compare(a, b);
          });
      }

      self._execAction('_sort', 1);
    },

    /**
     * Compare Algorithm
     * @since 2.0.0
     * @param {string|number} a
     * @param {string|number} b
     * @param {number} depth (recursion)
     * @return {number}
     */

    _compare: function (a, b, depth) {
      depth = depth ? depth : 0;

      var self = this,
        order = self._newSort[depth].order,
        getData = function (el) {
          return el.dataset[self._newSort[depth].sortBy] || 0;
        },
        attrA = isNaN(getData(a) * 1) ? getData(a).toLowerCase() : getData(a) * 1,
        attrB = isNaN(getData(b) * 1) ? getData(b).toLowerCase() : getData(b) * 1;

      if (attrA < attrB)
        return order === 'asc' ? -1 : 1;
      if (attrA > attrB)
        return order === 'asc' ? 1 : -1;
      if (attrA === attrB && self._newSort.length > depth + 1)
        return self._compare(a, b, depth + 1);

      return 0;
    },

    /**
     * Print Sort
     * @since 2.0.0
     * @param {boolean} reset
     */

    _printSort: function (reset) {
      var self = this,
        order = reset ? self._startOrder : self._newOrder,
        targets = self._$parent[0].querySelectorAll(self.selectors.target),
        nextSibling = targets.length ? targets[targets.length - 1].nextElementSibling : null,
        frag = document.createDocumentFragment();

      self._execAction('_printSort', 0, arguments);

      for (var i = 0; i < targets.length; i++) {
        var target = targets[i],
          whiteSpace = target.nextSibling;

        if (target.style.position === 'absolute') continue;

        if (whiteSpace && whiteSpace.nodeName === '#text') {
          self._$parent[0].removeChild(whiteSpace);
        }

        self._$parent[0].removeChild(target);
      }

      for (var i = 0; i < order.length; i++) {
        var el = order[i];

        if (self._newSort[0].sortBy === 'default' && self._newSort[0].order === 'desc' && !reset) {
          var firstChild = frag.firstChild;
          frag.insertBefore(el, firstChild);
          frag.insertBefore(document.createTextNode(' '), el);
        } else {
          frag.appendChild(el);
          frag.appendChild(document.createTextNode(' '));
        }
      }

      nextSibling ?
        self._$parent[0].insertBefore(frag, nextSibling) :
        self._$parent[0].appendChild(frag);

      self._execAction('_printSort', 1, arguments);
    },

    /**
     * Parse Sort
     * @since 2.0.0
     * @param {string} sortString
     * @return {array} newSort
     */

    _parseSort: function (sortString) {
      var self = this,
        rules = typeof sortString === 'string' ? sortString.split(' ') : [sortString],
        newSort = [];

      for (var i = 0; i < rules.length; i++) {
        var rule = typeof sortString === 'string' ? rules[i].split(':') : ['custom', rules[i]],
          ruleObj = {
            sortBy: self._helpers._camelCase(rule[0]),
            order: rule[1] || 'asc'
          };

        newSort.push(ruleObj);

        if (ruleObj.sortBy === 'default' || ruleObj.sortBy === 'random') break;
      }

      return self._execFilter('_parseSort', newSort, arguments);
    },

    /**
     * Parse Effects
     * @since 2.0.0
     * @return {object} effects
     */

    _parseEffects: function () {
      var self = this,
        effects = {
          opacity: '',
          transformIn: '',
          transformOut: '',
          filter: ''
        },
        parse = function (effect, extract, reverse) {
          if (self.animation.effects.indexOf(effect) > -1) {
            if (extract) {
              var propIndex = self.animation.effects.indexOf(effect + '(');
              if (propIndex > -1) {
                var str = self.animation.effects.substring(propIndex),
                  match = /\(([^)]+)\)/.exec(str),
                  val = match[1];

                return { val: val };
              }
            }
            return true;
          } else {
            return false;
          }
        },
        negate = function (value, invert) {
          if (invert) {
            return value.charAt(0) === '-' ? value.substr(1, value.length) : '-' + value;
          } else {
            return value;
          }
        },
        buildTransform = function (key, invert) {
          var transforms = [
            ['scale', '.01'],
            ['translateX', '20px'],
            ['translateY', '20px'],
            ['translateZ', '20px'],
            ['rotateX', '90deg'],
            ['rotateY', '90deg'],
            ['rotateZ', '180deg'],
          ];

          for (var i = 0; i < transforms.length; i++) {
            var prop = transforms[i][0],
              def = transforms[i][1],
              inverted = invert && prop !== 'scale';

            effects[key] += parse(prop) ? prop + '(' + negate(parse(prop, true).val || def, inverted) + ') ' : '';
          }
        };

      effects.opacity = parse('fade') ? parse('fade', true).val || '0' : '1';

      buildTransform('transformIn');

      self.animation.reverseOut ? buildTransform('transformOut', true) : (effects.transformOut = effects.transformIn);

      effects.transition = {};

      effects.transition = self._getPrefixedCSS('transition', 'all ' + self.animation.duration + 'ms ' + self.animation.easing + ', opacity ' + self.animation.duration + 'ms linear');

      self.animation.stagger = parse('stagger') ? true : false;
      self.animation.staggerDuration = parseInt(parse('stagger') ? (parse('stagger', true).val ? parse('stagger', true).val : 100) : 100);

      return self._execFilter('_parseEffects', effects);
    },

    /**
     * Build State
     * @since 2.0.0
     * @param {boolean} future
     * @return {object} futureState
     */

    _buildState: function (future) {
      var self = this,
        state = {};

      self._execAction('_buildState', 0);

      state = {
        activeFilter: self._activeFilter === '' ? 'none' : self._activeFilter,
        activeSort: future && self._newSortString ? self._newSortString : self._activeSort,
        fail: !self._$show.length && self._activeFilter !== '',
        $targets: self._$targets,
        $show: self._$show,
        $hide: self._$hide,
        totalTargets: self._$targets.length,
        totalShow: self._$show.length,
        totalHide: self._$hide.length,
        display: future && self._newDisplay ? self._newDisplay : self.layout.display
      };

      if (future) {
        return self._execFilter('_buildState', state);
      } else {
        self._state = state;

        self._execAction('_buildState', 1);
      }
    },

    /**
     * Go Mix
     * @since 2.0.0
     * @param {boolean} animate
     */

    _goMix: function (animate) {
      var self = this,
        phase1 = function () {
          if (self._chrome && (self._chrome === 31)) {
            chromeFix(self._$parent[0]);
          }

          self._setInter();

          phase2();
        },
        phase2 = function () {
          var scrollTop = window.pageYOffset,
            scrollLeft = window.pageXOffset,
            docHeight = document.documentElement.scrollHeight;

          self._getInterMixData();

          self._setFinal();

          self._getFinalMixData();

          (window.pageYOffset !== scrollTop) && window.scrollTo(scrollLeft, scrollTop);

          self._prepTargets();

          if (window.requestAnimationFrame) {
            requestAnimationFrame(phase3);
          } else {
            setTimeout(function () {
              phase3();
            }, 20);
          }
        },
        phase3 = function () {
          self._animateTargets();

          if (self._targetsBound === 0) {
            self._cleanUp();
          }
        },
        chromeFix = function (grid) {
          var parent = grid.parentElement,
            placeholder = document.createElement('div'),
            frag = document.createDocumentFragment();

          parent.insertBefore(placeholder, grid);
          frag.appendChild(grid);
          parent.replaceChild(grid, placeholder);
        },
        futureState = self._buildState(true);

      self._execAction('_goMix', 0, arguments);

      !self.animation.duration && (animate = false);

      self._mixing = true;

      self._$container.removeClass(self.layout.containerClassFail);

      if (typeof self.callbacks.onMixStart === 'function') {
        self.callbacks.onMixStart.call(self._domNode, self._state, futureState, self);
      }

      self._$container.trigger('mixStart', [self._state, futureState, self]);

      self._getOrigMixData();

      if (animate && !self._suckMode) {

        window.requestAnimationFrame ?
          requestAnimationFrame(phase1) :
          phase1();

      } else {
        self._cleanUp();
      }

      self._execAction('_goMix', 1, arguments);
    },

    /**
     * Get Target Data
     * @since 2.0.0
     */

    _getTargetData: function (el, stage) {
      var self = this,
        elStyle;

      el.dataset[stage + 'PosX'] = el.offsetLeft;
      el.dataset[stage + 'PosY'] = el.offsetTop;

      if (self.animation.animateResizeTargets) {
        elStyle = !self._suckMode ?
          window.getComputedStyle(el) :
          {
            marginBottom: '',
            marginRight: ''
          };

        el.dataset[stage + 'MarginBottom'] = parseInt(elStyle.marginBottom);
        el.dataset[stage + 'MarginRight'] = parseInt(elStyle.marginRight);
        el.dataset[stage + 'Width'] = el.offsetWidth;
        el.dataset[stage + 'Height'] = el.offsetHeight;
      }
    },

    /**
     * Get Original Mix Data
     * @since 2.0.0
     */

    _getOrigMixData: function () {
      var self = this,
        parentStyle = !self._suckMode ? window.getComputedStyle(self._$parent[0]) : { boxSizing: '' },
        parentBS = parentStyle.boxSizing || parentStyle[self._vendor + 'BoxSizing'];

      self._incPadding = (parentBS === 'border-box');

      self._execAction('_getOrigMixData', 0);

      !self._suckMode && (self.effects = self._parseEffects());

      self._$toHide = self._$hide.filter(':visible');
      self._$toShow = self._$show.filter(':hidden');
      self._$pre = self._$targets.filter(':visible');

      self._startHeight = self._incPadding ?
        self._$parent.outerHeight() :
        self._$parent.height();

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'orig');
      }

      self._execAction('_getOrigMixData', 1);
    },

    /**
     * Set Intermediate Positions
     * @since 2.0.0
     */

    _setInter: function () {
      var self = this;

      self._execAction('_setInter', 0);

      if (self._changingLayout && self.animation.animateChangeLayout) {
        self._$toShow.css('display', self._newDisplay);

        if (self._changingClass) {
          self._$container
            .removeClass(self.layout.containerClass)
            .addClass(self._newClass);
        }
      } else {
        self._$toShow.css('display', self.layout.display);
      }

      self._execAction('_setInter', 1);
    },

    /**
     * Get Intermediate Mix Data
     * @since 2.0.0
     */

    _getInterMixData: function () {
      var self = this;

      self._execAction('_getInterMixData', 0);

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i];

        self._getTargetData(el, 'inter');
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'inter');
      }

      self._execAction('_getInterMixData', 1);
    },

    /**
     * Set Final Positions
     * @since 2.0.0
     */

    _setFinal: function () {
      var self = this;

      self._execAction('_setFinal', 0);

      self._sorting && self._printSort();

      self._$toHide.removeStyle('display');

      if (self._changingLayout && self.animation.animateChangeLayout) {
        self._$pre.css('display', self._newDisplay);
      }

      self._execAction('_setFinal', 1);
    },

    /**
     * Get Final Mix Data
     * @since 2.0.0
     */

    _getFinalMixData: function () {
      var self = this;

      self._execAction('_getFinalMixData', 0);

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i];

        self._getTargetData(el, 'final');
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'final');
      }

      self._newHeight = self._incPadding ?
        self._$parent.outerHeight() :
        self._$parent.height();

      self._sorting && self._printSort(true);

      self._$toShow.removeStyle('display');

      self._$pre.css('display', self.layout.display);

      if (self._changingClass && self.animation.animateChangeLayout) {
        self._$container
          .removeClass(self._newClass)
          .addClass(self.layout.containerClass);
      }

      self._execAction('_getFinalMixData', 1);
    },

    /**
     * Prepare Targets
     * @since 2.0.0
     */

    _prepTargets: function () {
      var self = this,
        transformCSS = {
          _in: self._getPrefixedCSS('transform', self.effects.transformIn),
          _out: self._getPrefixedCSS('transform', self.effects.transformOut)
        };

      self._execAction('_prepTargets', 0);

      if (self.animation.animateResizeContainer) {
        self._$parent.css('height', self._startHeight + 'px');
      }

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i],
          $el = $(el);

        el.style.opacity = self.effects.opacity;
        el.style.display = (self._changingLayout && self.animation.animateChangeLayout) ?
          self._newDisplay :
          self.layout.display;

        $el.css(transformCSS._in);

        if (self.animation.animateResizeTargets) {
          el.style.width = el.dataset.finalWidth + 'px';
          el.style.height = el.dataset.finalHeight + 'px';
          el.style.marginRight = -(el.dataset.finalWidth - el.dataset.interWidth) + (el.dataset.finalMarginRight * 1) + 'px';
          el.style.marginBottom = -(el.dataset.finalHeight - el.dataset.interHeight) + (el.dataset.finalMarginBottom * 1) + 'px';
        }
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i],
          $el = $(el),
          translate = {
            x: el.dataset.origPosX - el.dataset.interPosX,
            y: el.dataset.origPosY - el.dataset.interPosY
          },
          transformCSS = self._getPrefixedCSS('transform', 'translate(' + translate.x + 'px,' + translate.y + 'px)');

        $el.css(transformCSS);

        if (self.animation.animateResizeTargets) {
          el.style.width = el.dataset.origWidth + 'px';
          el.style.height = el.dataset.origHeight + 'px';

          if (el.dataset.origWidth - el.dataset.finalWidth) {
            el.style.marginRight = -(el.dataset.origWidth - el.dataset.interWidth) + (el.dataset.origMarginRight * 1) + 'px';
          }

          if (el.dataset.origHeight - el.dataset.finalHeight) {
            el.style.marginBottom = -(el.dataset.origHeight - el.dataset.interHeight) + (el.dataset.origMarginBottom * 1) + 'px';
          }
        }
      }

      self._execAction('_prepTargets', 1);
    },

    /**
     * Animate Targets
     * @since 2.0.0
     */

    _animateTargets: function () {
      var self = this;

      self._execAction('_animateTargets', 0);

      self._targetsDone = 0;
      self._targetsBound = 0;

      self._$parent
        .css(self._getPrefixedCSS('perspective', self.animation.perspectiveDistance + 'px'))
        .css(self._getPrefixedCSS('perspective-origin', self.animation.perspectiveOrigin));

      if (self.animation.animateResizeContainer) {
        self._$parent
          .css(self._getPrefixedCSS('transition', 'height ' + self.animation.duration + 'ms ease'))
          .css('height', self._newHeight + 'px');
      }

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i],
          $el = $(el),
          translate = {
            x: el.dataset.finalPosX - el.dataset.interPosX,
            y: el.dataset.finalPosY - el.dataset.interPosY
          },
          delay = self._getDelay(i),
          toShowCSS = {};

        el.style.opacity = '';

        for (var j = 0; j < 2; j++) {
          var a = j === 0 ? a = self._prefix : '';

          if (self._ff && self._ff <= 20) {
            toShowCSS[a + 'transition-property'] = 'all';
            toShowCSS[a + 'transition-timing-function'] = self.animation.easing + 'ms';
            toShowCSS[a + 'transition-duration'] = self.animation.duration + 'ms';
          }

          toShowCSS[a + 'transition-delay'] = delay + 'ms';
          toShowCSS[a + 'transform'] = 'translate(' + translate.x + 'px,' + translate.y + 'px)';
        }

        if (self.effects.transform || self.effects.opacity) {
          self._bindTargetDone($el);
        }

        (self._ff && self._ff <= 20) ?
          $el.css(toShowCSS) :
          $el.css(self.effects.transition).css(toShowCSS);
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i],
          $el = $(el),
          translate = {
            x: el.dataset.finalPosX - el.dataset.interPosX,
            y: el.dataset.finalPosY - el.dataset.interPosY
          },
          delay = self._getDelay(i);

        if (!(
          el.dataset.finalPosX === el.dataset.origPosX &&
          el.dataset.finalPosY === el.dataset.origPosY
        )) {
          self._bindTargetDone($el);
        }

        $el.css(self._getPrefixedCSS('transition', 'all ' + self.animation.duration + 'ms ' + self.animation.easing + ' ' + delay + 'ms'));
        $el.css(self._getPrefixedCSS('transform', 'translate(' + translate.x + 'px,' + translate.y + 'px)'));

        if (self.animation.animateResizeTargets) {
          if (el.dataset.origWidth - el.dataset.finalWidth && el.dataset.finalWidth * 1) {
            el.style.width = el.dataset.finalWidth + 'px';
            el.style.marginRight = -(el.dataset.finalWidth - el.dataset.interWidth) + (el.dataset.finalMarginRight * 1) + 'px';
          }

          if (el.dataset.origHeight - el.dataset.finalHeight && el.dataset.finalHeight * 1) {
            el.style.height = el.dataset.finalHeight + 'px';
            el.style.marginBottom = -(el.dataset.finalHeight - el.dataset.interHeight) + (el.dataset.finalMarginBottom * 1) + 'px';
          }
        }
      }

      if (self._changingClass) {
        self._$container
          .removeClass(self.layout.containerClass)
          .addClass(self._newClass);
      }

      for (var i = 0; i < self._$toHide.length; i++) {
        var el = self._$toHide[i],
          $el = $(el),
          delay = self._getDelay(i),
          toHideCSS = {};

        for (var j = 0; j < 2; j++) {
          var a = j === 0 ? a = self._prefix : '';

          toHideCSS[a + 'transition-delay'] = delay + 'ms';
          toHideCSS[a + 'transform'] = self.effects.transformOut;
          toHideCSS.opacity = self.effects.opacity;
        }

        $el.css(self.effects.transition).css(toHideCSS);

        if (self.effects.transform || self.effects.opacity) {
          self._bindTargetDone($el);
        };
      }

      self._execAction('_animateTargets', 1);

    },

    /**
     * Bind Targets TransitionEnd
     * @since 2.0.0
     * @param {object} $el
     */

    _bindTargetDone: function ($el) {
      var self = this,
        el = $el[0];

      self._execAction('_bindTargetDone', 0, arguments);

      if (!el.dataset.bound) {

        el.dataset.bound = true;
        self._targetsBound++;

        $el.on('webkitTransitionEnd.mixItUp transitionend.mixItUp', function (e) {
          if (
            (e.originalEvent.propertyName.indexOf('transform') > -1 ||
              e.originalEvent.propertyName.indexOf('opacity') > -1) &&
            $(e.originalEvent.target).is(self.selectors.target)
          ) {
            $el.off('.mixItUp');
            el.dataset.bound = '';
            self._targetDone();
          }
        });
      }

      self._execAction('_bindTargetDone', 1, arguments);
    },

    /**
     * Target Done
     * @since 2.0.0
     */

    _targetDone: function () {
      var self = this;

      self._execAction('_targetDone', 0);

      self._targetsDone++;

      (self._targetsDone === self._targetsBound) && self._cleanUp();

      self._execAction('_targetDone', 1);
    },

    /**
     * Clean Up
     * @since 2.0.0
     */

    _cleanUp: function () {
      var self = this,
        targetStyles = self.animation.animateResizeTargets ?
          'transform opacity width height margin-bottom margin-right' :
          'transform opacity',
        unBrake = function () {
          self._$targets.removeStyle('transition', self._prefix);
        };

      self._execAction('_cleanUp', 0);

      !self._changingLayout ?
        self._$show.css('display', self.layout.display) :
        self._$show.css('display', self._newDisplay);

      self._$targets.css(self._brake);

      self._$targets
        .removeStyle(targetStyles, self._prefix)
        .removeAttr('data-inter-pos-x data-inter-pos-y data-final-pos-x data-final-pos-y data-orig-pos-x data-orig-pos-y data-orig-height data-orig-width data-final-height data-final-width data-inter-width data-inter-height data-orig-margin-right data-orig-margin-bottom data-inter-margin-right data-inter-margin-bottom data-final-margin-right data-final-margin-bottom');

      self._$hide.removeStyle('display');

      self._$parent.removeStyle('height transition perspective-distance perspective perspective-origin-x perspective-origin-y perspective-origin perspectiveOrigin', self._prefix);

      if (self._sorting) {
        self._printSort();
        self._activeSort = self._newSortString;
        self._sorting = false;
      }

      if (self._changingLayout) {
        if (self._changingDisplay) {
          self.layout.display = self._newDisplay;
          self._changingDisplay = false;
        }

        if (self._changingClass) {
          self._$parent.removeClass(self.layout.containerClass).addClass(self._newClass);
          self.layout.containerClass = self._newClass;
          self._changingClass = false;
        }

        self._changingLayout = false;
      }

      self._refresh();

      self._buildState();

      if (self._state.fail) {
        self._$container.addClass(self.layout.containerClassFail);
      }

      self._$show = $();
      self._$hide = $();

      if (window.requestAnimationFrame) {
        requestAnimationFrame(unBrake);
      }

      self._mixing = false;

      if (typeof self.callbacks._user === 'function') {
        self.callbacks._user.call(self._domNode, self._state, self);
      }

      if (typeof self.callbacks.onMixEnd === 'function') {
        self.callbacks.onMixEnd.call(self._domNode, self._state, self);
      }

      self._$container.trigger('mixEnd', [self._state, self]);

      if (self._state.fail) {
        (typeof self.callbacks.onMixFail === 'function') && self.callbacks.onMixFail.call(self._domNode, self._state, self);
        self._$container.trigger('mixFail', [self._state, self]);
      }

      if (self._loading) {
        (typeof self.callbacks.onMixLoad === 'function') && self.callbacks.onMixLoad.call(self._domNode, self._state, self);
        self._$container.trigger('mixLoad', [self._state, self]);
      }

      if (self._queue.length) {
        self._execAction('_queue', 0);

        self.multiMix(self._queue[0][0], self._queue[0][1], self._queue[0][2]);
        self._queue.splice(0, 1);
      }

      self._execAction('_cleanUp', 1);

      self._loading = false;
    },

    /**
     * Get Prefixed CSS
     * @since 2.0.0
     * @param {string} property
     * @param {string} value
     * @param {boolean} prefixValue
     * @return {object} styles
     */

    _getPrefixedCSS: function (property, value, prefixValue) {
      var self = this,
        styles = {},
        prefix = '',
        i = -1;

      for (i = 0; i < 2; i++) {
        prefix = i === 0 ? self._prefix : '';
        prefixValue ? styles[prefix + property] = prefix + value : styles[prefix + property] = value;
      }

      return self._execFilter('_getPrefixedCSS', styles, arguments);
    },

    /**
     * Get Delay
     * @since 2.0.0
     * @param {number} i
     * @return {number} delay
     */

    _getDelay: function (i) {
      var self = this,
        n = typeof self.animation.staggerSequence === 'function' ? self.animation.staggerSequence.call(self._domNode, i, self._state) : i,
        delay = self.animation.stagger ? n * self.animation.staggerDuration : 0;

      return self._execFilter('_getDelay', delay, arguments);
    },

    /**
     * Parse MultiMix Arguments
     * @since 2.0.0
     * @param {array} args
     * @return {object} output
     */

    _parseMultiMixArgs: function (args) {
      var self = this,
        output = {
          command: null,
          animate: self.animation.enable,
          callback: null
        };

      for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        if (arg !== null) {
          if (typeof arg === 'object' || typeof arg === 'string') {
            output.command = arg;
          } else if (typeof arg === 'boolean') {
            output.animate = arg;
          } else if (typeof arg === 'function') {
            output.callback = arg;
          }
        }
      }

      return self._execFilter('_parseMultiMixArgs', output, arguments);
    },

    /**
     * Parse Insert Arguments
     * @since 2.0.0
     * @param {array} args
     * @return {object} output
     */

    _parseInsertArgs: function (args) {
      var self = this,
        output = {
          index: 0,
          $object: $(),
          multiMix: { filter: self._state.activeFilter },
          callback: null
        };

      for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        if (typeof arg === 'number') {
          output.index = arg;
        } else if (typeof arg === 'object' && arg instanceof $) {
          output.$object = arg;
        } else if (typeof arg === 'object' && self._helpers._isElement(arg)) {
          output.$object = $(arg);
        } else if (typeof arg === 'object' && arg !== null) {
          output.multiMix = arg;
        } else if (typeof arg === 'boolean' && !arg) {
          output.multiMix = false;
        } else if (typeof arg === 'function') {
          output.callback = arg;
        }
      }

      return self._execFilter('_parseInsertArgs', output, arguments);
    },

    /**
     * Execute Action
     * @since 2.0.0
     * @param {string} methodName
     * @param {boolean} isPost
     * @param {array} args
     */

    _execAction: function (methodName, isPost, args) {
      var self = this,
        context = isPost ? 'post' : 'pre';

      if (!self._actions.isEmptyObject && self._actions.hasOwnProperty(methodName)) {
        for (var key in self._actions[methodName][context]) {
          self._actions[methodName][context][key].call(self, args);
        }
      }
    },

    /**
     * Execute Filter
     * @since 2.0.0
     * @param {string} methodName
     * @param {mixed} value
     * @return {mixed} value
     */

    _execFilter: function (methodName, value, args) {
      var self = this;

      if (!self._filters.isEmptyObject && self._filters.hasOwnProperty(methodName)) {
        for (var key in self._filters[methodName]) {
          return self._filters[methodName][key].call(self, args);
        }
      } else {
        return value;
      }
    },

    /* Helpers
    ---------------------------------------------------------------------- */

    _helpers: {

      /**
       * CamelCase
       * @since 2.0.0
       * @param {string}
       * @return {string}
       */

      _camelCase: function (string) {
        return string.replace(/-([a-z])/g, function (g) {
          return g[1].toUpperCase();
        });
      },

      /**
       * Is Element
       * @since 2.1.3
       * @param {object} element to test
       * @return {boolean}
       */

      _isElement: function (el) {
        if (window.HTMLElement) {
          return el instanceof HTMLElement;
        } else {
          return (
            el !== null &&
            el.nodeType === 1 &&
            el.nodeName === 'string'
          );
        }
      }
    },

    /* Public Methods
    ---------------------------------------------------------------------- */

    /**
     * Is Mixing
     * @since 2.0.0
     * @return {boolean}
     */

    isMixing: function () {
      var self = this;

      return self._execFilter('isMixing', self._mixing);
    },

    /**
     * Filter (public)
     * @since 2.0.0
     * @param {array} arguments
     */

    filter: function () {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self._clicking && (self._toggleString = '');

      self.multiMix({ filter: args.command }, args.animate, args.callback);
    },

    /**
     * Sort (public)
     * @since 2.0.0
     * @param {array} arguments
     */

    sort: function () {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self.multiMix({ sort: args.command }, args.animate, args.callback);
    },

    /**
     * Change Layout (public)
     * @since 2.0.0
     * @param {array} arguments
     */

    changeLayout: function () {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self.multiMix({ changeLayout: args.command }, args.animate, args.callback);
    },

    /**
     * MultiMix
     * @since 2.0.0
     * @param {array} arguments
     */

    multiMix: function () {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self._execAction('multiMix', 0, arguments);

      if (!self._mixing) {
        if (self.controls.enable && !self._clicking) {
          self.controls.toggleFilterButtons && self._buildToggleArray();
          self._updateControls(args.command, self.controls.toggleFilterButtons);
        }

        (self._queue.length < 2) && (self._clicking = false);

        delete self.callbacks._user;
        if (args.callback) self.callbacks._user = args.callback;

        var sort = args.command.sort,
          filter = args.command.filter,
          changeLayout = args.command.changeLayout;

        self._refresh();

        if (sort) {
          self._newSort = self._parseSort(sort);
          self._newSortString = sort;

          self._sorting = true;
          self._sort();
        }

        if (filter !== undf) {
          filter = (filter === 'all') ? self.selectors.target : filter;

          self._activeFilter = filter;
        }

        self._filter();

        if (changeLayout) {
          self._newDisplay = (typeof changeLayout === 'string') ? changeLayout : changeLayout.display || self.layout.display;
          self._newClass = changeLayout.containerClass || '';

          if (
            self._newDisplay !== self.layout.display ||
            self._newClass !== self.layout.containerClass
          ) {
            self._changingLayout = true;

            self._changingClass = (self._newClass !== self.layout.containerClass);
            self._changingDisplay = (self._newDisplay !== self.layout.display);
          }
        }

        self._$targets.css(self._brake);

        self._goMix(args.animate ^ self.animation.enable ? args.animate : self.animation.enable);

        self._execAction('multiMix', 1, arguments);

      } else {
        if (self.animation.queue && self._queue.length < self.animation.queueLimit) {
          self._queue.push(arguments);

          (self.controls.enable && !self._clicking) && self._updateControls(args.command);

          self._execAction('multiMixQueue', 1, arguments);

        } else {
          if (typeof self.callbacks.onMixBusy === 'function') {
            self.callbacks.onMixBusy.call(self._domNode, self._state, self);
          }
          self._$container.trigger('mixBusy', [self._state, self]);

          self._execAction('multiMixBusy', 1, arguments);
        }
      }
    },

    /**
     * Insert
     * @since 2.0.0
     * @param {array} arguments
     */

    insert: function () {
      var self = this,
        args = self._parseInsertArgs(arguments),
        callback = (typeof args.callback === 'function') ? args.callback : null,
        frag = document.createDocumentFragment(),
        target = (function () {
          self._refresh();

          if (self._$targets.length) {
            return (args.index < self._$targets.length || !self._$targets.length) ?
              self._$targets[args.index] :
              self._$targets[self._$targets.length - 1].nextElementSibling;
          } else {
            return self._$parent[0].children[0];
          }
        })();

      self._execAction('insert', 0, arguments);

      if (args.$object) {
        for (var i = 0; i < args.$object.length; i++) {
          var el = args.$object[i];

          frag.appendChild(el);
          frag.appendChild(document.createTextNode(' '));
        }

        self._$parent[0].insertBefore(frag, target);
      }

      self._execAction('insert', 1, arguments);

      if (typeof args.multiMix === 'object') {
        self.multiMix(args.multiMix, callback);
      }
    },

    /**
     * Prepend
     * @since 2.0.0
     * @param {array} arguments
     */

    prepend: function () {
      var self = this,
        args = self._parseInsertArgs(arguments);

      self.insert(0, args.$object, args.multiMix, args.callback);
    },

    /**
     * Append
     * @since 2.0.0
     * @param {array} arguments
     */

    append: function () {
      var self = this,
        args = self._parseInsertArgs(arguments);

      self.insert(self._state.totalTargets, args.$object, args.multiMix, args.callback);
    },

    /**
     * Get Option
     * @since 2.0.0
     * @param {string} string
     * @return {mixed} value
     */

    getOption: function (string) {
      var self = this,
        getProperty = function (obj, prop) {
          var parts = prop.split('.'),
            last = parts.pop(),
            l = parts.length,
            i = 1,
            current = parts[0] || prop;

          while ((obj = obj[current]) && i < l) {
            current = parts[i];
            i++;
          }

          if (obj !== undf) {
            return obj[last] !== undf ? obj[last] : obj;
          }
        };

      return string ? self._execFilter('getOption', getProperty(self, string), arguments) : self;
    },

    /**
     * Set Options
     * @since 2.0.0
     * @param {object} config
     */

    setOptions: function (config) {
      var self = this;

      self._execAction('setOptions', 0, arguments);

      typeof config === 'object' && $.extend(true, self, config);

      self._execAction('setOptions', 1, arguments);
    },

    /**
     * Get State
     * @since 2.0.0
     * @return {object} state
     */

    getState: function () {
      var self = this;

      return self._execFilter('getState', self._state, self);
    },

    /**
     * Force Refresh
     * @since 2.1.2
     */

    forceRefresh: function () {
      var self = this;

      self._refresh(false, true);
    },

    /**
     * Destroy
     * @since 2.0.0
     * @param {boolean} hideAll
     */

    destroy: function (hideAll) {
      var self = this,
        filters = $.MixItUp.prototype._bound._filter,
        sorts = $.MixItUp.prototype._bound._sort;

      self._execAction('destroy', 0, arguments);

      self._$body
        .add($(self.selectors.sort))
        .add($(self.selectors.filter))
        .off('.mixItUp');

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        hideAll && (target.style.display = '');

        delete target.mixParent;
      }

      self._execAction('destroy', 1, arguments);

      if (filters[self.selectors.filter] && filters[self.selectors.filter] > 1) {
        filters[self.selectors.filter]--;
      } else if (filters[self.selectors.filter] === 1) {
        delete filters[self.selectors.filter];
      }

      if (sorts[self.selectors.sort] && sorts[self.selectors.sort] > 1) {
        sorts[self.selectors.sort]--;
      } else if (sorts[self.selectors.sort] === 1) {
        delete sorts[self.selectors.sort];
      }

      delete $.MixItUp.prototype._instances[self._id];
    }

  };

  /* jQuery Methods
  ---------------------------------------------------------------------- */

  /**
   * jQuery .mixItUp() method
   * @since 2.0.0
   * @extends $.fn
   */

  $.fn.mixItUp = function () {
    var args = arguments,
      dataReturn = [],
      eachReturn,
      _instantiate = function (domNode, settings) {
        var instance = new $.MixItUp(),
          rand = function () {
            return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();
          };

        instance._execAction('_instantiate', 0, arguments);

        domNode.id = !domNode.id ? 'MixItUp' + rand() : domNode.id;

        if (!instance._instances[domNode.id]) {
          instance._instances[domNode.id] = instance;
          instance._init(domNode, settings);
        }

        instance._execAction('_instantiate', 1, arguments);
      };

    eachReturn = this.each(function () {
      if (args && typeof args[0] === 'string') {
        var instance = $.MixItUp.prototype._instances[this.id];
        if (args[0] === 'isLoaded') {
          dataReturn.push(instance ? true : false);
        } else {
          var data = instance[args[0]](args[1], args[2], args[3]);
          if (data !== undf) dataReturn.push(data);
        }
      } else {
        _instantiate(this, args[0]);
      }
    });

    if (dataReturn.length) {
      return dataReturn.length > 1 ? dataReturn : dataReturn[0];
    } else {
      return eachReturn;
    }
  };

  /**
   * jQuery .removeStyle() method
   * @since 2.0.0
   * @extends $.fn
   */

  $.fn.removeStyle = function (style, prefix) {
    prefix = prefix ? prefix : '';

    return this.each(function () {
      var el = this,
        styles = style.split(' ');

      for (var i = 0; i < styles.length; i++) {
        for (var j = 0; j < 4; j++) {
          switch (j) {
            case 0:
              var prop = styles[i];
              break;
            case 1:
              var prop = $.MixItUp.prototype._helpers._camelCase(prop);
              break;
            case 2:
              var prop = prefix + styles[i];
              break;
            case 3:
              var prop = $.MixItUp.prototype._helpers._camelCase(prefix + styles[i]);
          }

          if (
            el.style[prop] !== undf &&
            typeof el.style[prop] !== 'unknown' &&
            el.style[prop].length > 0
          ) {
            el.style[prop] = '';
          }

          if (!prefix && j === 1) break;
        }
      }

      if (el.attributes && el.attributes.style && el.attributes.style !== undf && el.attributes.style.value === '') {
        el.attributes.removeNamedItem('style');
      }
    });
  };

})(jQuery);



* /
!function (t, i, n, s) { var e = function (s, e) { this.elem = s, this.$elem = t(s), this.options = e, this.metadata = this.$elem.data("plugin-options"), this.$win = t(i), this.sections = {}, this.didScroll = !1, this.$doc = t(n), this.docHeight = this.$doc.height() }; e.prototype = { defaults: { navItems: "a", currentClass: "current", changeHash: !1, easing: "swing", filter: "", scrollSpeed: 750, scrollThreshold: .5, begin: !1, end: !1, scrollChange: !1 }, init: function () { return this.config = t.extend({}, this.defaults, this.options, this.metadata), this.$nav = this.$elem.find(this.config.navItems), "" !== this.config.filter && (this.$nav = this.$nav.filter(this.config.filter)), this.$nav.on("click.onePageNav", t.proxy(this.handleClick, this)), this.getPositions(), this.bindInterval(), this.$win.on("resize.onePageNav", t.proxy(this.getPositions, this)), this }, adjustNav: function (t, i) { t.$elem.find("." + t.config.currentClass).removeClass(t.config.currentClass), i.addClass(t.config.currentClass) }, bindInterval: function () { var t, i = this; i.$win.on("scroll.onePageNav", function () { i.didScroll = !0 }), i.t = setInterval(function () { t = i.$doc.height(), i.didScroll && (i.didScroll = !1, i.scrollChange()), t !== i.docHeight && (i.docHeight = t, i.getPositions()) }, 250) }, getHash: function (t) { return t.attr("href").split("#")[1] }, getPositions: function () { var i, n, s, e = this; e.$nav.each(function () { i = e.getHash(t(this)), s = t("#" + i), s.length && (n = s.offset().top, e.sections[i] = Math.round(n)) }) }, getSection: function (t) { var i = null, n = Math.round(this.$win.height() * this.config.scrollThreshold); for (var s in this.sections) this.sections[s] - n < t && (i = s); return i }, handleClick: function (n) { var s = this, e = t(n.currentTarget), o = e.parent(), a = "#" + s.getHash(e); o.hasClass(s.config.currentClass) || (s.config.begin && s.config.begin(), s.adjustNav(s, o), s.unbindInterval(), s.scrollTo(a, function () { s.config.changeHash && (i.location.hash = a), s.bindInterval(), s.config.end && s.config.end() })), n.preventDefault() }, scrollChange: function () { var t, i = this.$win.scrollTop(), n = this.getSection(i); null !== n && (t = this.$elem.find('a[href$="#' + n + '"]').parent(), t.hasClass(this.config.currentClass) || (this.adjustNav(this, t), this.config.scrollChange && this.config.scrollChange(t))) }, scrollTo: function (i, n) { var s = t(i).offset().top; t("html, body").animate({ scrollTop: s - this.config.scrollOffset }, this.config.scrollSpeed, this.config.easing, n) }, unbindInterval: function () { clearInterval(this.t), this.$win.unbind("scroll.onePageNav") } }, e.defaults = e.prototype.defaults, t.fn.onePageNav = function (t) { return this.each(function () { new e(this, t).init() }) } }(jQuery, window, document);



; (function ($, window, document, undefined) {

  var pluginName = 'nivoLightbox',
    defaults = {
      effect: 'fade',
      theme: 'default',
      keyboardNav: true,
      clickImgToClose: false,
      clickOverlayToClose: true,
      onInit: function () { },
      beforeShowLightbox: function () { },
      afterShowLightbox: function (lightbox) { },
      beforeHideLightbox: function () { },
      afterHideLightbox: function () { },
      beforePrev: function (element) { },
      onPrev: function (element) { },
      beforeNext: function (element) { },
      onNext: function (element) { },
      errorMessage: 'The requested content cannot be loaded. Please try again later.'
    };

  function NivoLightbox(element, options) {
    this.el = element;
    this.$el = $(this.el);

    this.options = $.extend({}, defaults, options);

    this._defaults = defaults;
    this._name = pluginName;

    this.init();
  }

  NivoLightbox.prototype = {

    init: function () {
      var $this = this;

      // Need this so we don't use CSS transitions in mobile
      if (!$('html').hasClass('nivo-lightbox-notouch')) $('html').addClass('nivo-lightbox-notouch');
      if ('ontouchstart' in document) $('html').removeClass('nivo-lightbox-notouch');

      // Setup the click
      this.$el.on('click', function (e) {
        $this.showLightbox(e);
      });

      // keyboardNav
      if (this.options.keyboardNav) {
        $('body').off('keyup').on('keyup', function (e) {
          var code = (e.keyCode ? e.keyCode : e.which);
          // Escape
          if (code == 27) $this.destructLightbox();
          // Left
          if (code == 37) $('.nivo-lightbox-prev').trigger('click');
          // Right
          if (code == 39) $('.nivo-lightbox-next').trigger('click');
        });
      }

      this.options.onInit.call(this);

    },

    showLightbox: function (e) {
      var $this = this,
        currentLink = this.$el;

      // Check content
      var check = this.checkContent(currentLink);
      if (!check) return;

      e.preventDefault();
      this.options.beforeShowLightbox.call(this);
      var lightbox = this.constructLightbox();
      if (!lightbox) return;
      var content = lightbox.find('.nivo-lightbox-content');
      if (!content) return;

      $('body').addClass('nivo-lightbox-body-effect-' + this.options.effect);

      this.processContent(content, currentLink);

      // Nav
      if (this.$el.attr('data-lightbox-gallery')) {
        var galleryItems = $('[data-lightbox-gallery="' + this.$el.attr('data-lightbox-gallery') + '"]');

        $('.nivo-lightbox-nav').show();

        // Prev
        $('.nivo-lightbox-prev').off('click').on('click', function (e) {
          e.preventDefault();
          var index = galleryItems.index(currentLink);
          currentLink = galleryItems.eq(index - 1);
          if (!$(currentLink).length) currentLink = galleryItems.last();
          $.when($this.options.beforePrev.call(this, [currentLink])).done(function () {
            $this.processContent(content, currentLink);
            $this.options.onPrev.call(this, [currentLink]);
          });
        });

        // Next
        $('.nivo-lightbox-next').off('click').on('click', function (e) {
          e.preventDefault();
          var index = galleryItems.index(currentLink);
          currentLink = galleryItems.eq(index + 1);
          if (!$(currentLink).length) currentLink = galleryItems.first();
          $.when($this.options.beforeNext.call(this, [currentLink])).done(function () {
            $this.processContent(content, currentLink);
            $this.options.onNext.call(this, [currentLink]);
          });
        });
      }

      setTimeout(function () {
        lightbox.addClass('nivo-lightbox-open');
        $this.options.afterShowLightbox.call(this, [lightbox]);
      }, 1); // For CSS transitions
    },

    checkContent: function (link) {
      var $this = this,
        href = link.attr('href'),
        video = href.match(/(youtube|youtube-nocookie|youtu|vimeo)\.(com|be)\/(watch\?v=([\w-]+)|([\w-]+))/);

      if (href.match(/\.(jpeg|jpg|gif|png)$/i) !== null) {
        return true;
      }
      // Video (Youtube/Vimeo)
      else if (video) {
        return true;
      }
      // AJAX
      else if (link.attr('data-lightbox-type') == 'ajax') {
        return true;
      }
      // Inline HTML
      else if (href.substring(0, 1) == '#' && link.attr('data-lightbox-type') == 'inline') {
        return true;
      }
      // iFrame (default)
      else if (link.attr('data-lightbox-type') == 'iframe') {
        return true;
      }

      return false;
    },

    processContent: function (content, link) {
      var $this = this,
        href = link.attr('href'),
        video = href.match(/(youtube|youtube-nocookie|youtu|vimeo)\.(com|be)\/(watch\?v=([\w-]+)|([\w-]+))/);

      content.html('').addClass('nivo-lightbox-loading');

      // Is HiDPI?
      if (this.isHidpi() && link.attr('data-lightbox-hidpi')) {
        href = link.attr('data-lightbox-hidpi');
      }

      // Image
      if (href.match(/\.(jpeg|jpg|gif|png)$/i) !== null) {
        var img = $('<img>', { src: href, 'class': 'nivo-lightbox-image-display' });
        img.one('load', function () {
          var wrap = $('<div class="nivo-lightbox-image" />');
          wrap.append(img);
          content.html(wrap).removeClass('nivo-lightbox-loading');

          // Vertically center images
          wrap.css({
            'line-height': $('.nivo-lightbox-content').height() + 'px',
            'height': $('.nivo-lightbox-content').height() + 'px' // For Firefox
          });
          $(window).resize(function () {
            wrap.css({
              'line-height': $('.nivo-lightbox-content').height() + 'px',
              'height': $('.nivo-lightbox-content').height() + 'px' // For Firefox
            });
          });
        }).each(function () {
          if (this.complete) $(this).load();
        });

        img.error(function () {
          var wrap = $('<div class="nivo-lightbox-error"><p>' + $this.options.errorMessage + '</p></div>');
          content.html(wrap).removeClass('nivo-lightbox-loading');
        });
      }
      // Video (Youtube/Vimeo)
      else if (video) {
        var src = '',
          classTerm = 'nivo-lightbox-video';

        if (video[1] == 'youtube') {
          src = '//www.youtube.com/embed/' + video[4];
          classTerm = 'nivo-lightbox-youtube';
        }
        if (video[1] == 'youtube-nocookie') {
          src = href; //https://www.youtube-nocookie.com/embed/...
          classTerm = 'nivo-lightbox-youtube';
        }
        if (video[1] == 'youtu') {
          src = '//www.youtube.com/embed/' + video[3];
          classTerm = 'nivo-lightbox-youtube';
        }
        if (video[1] == 'vimeo') {
          src = '//player.vimeo.com/video/' + video[3];
          classTerm = 'nivo-lightbox-vimeo';
        }

        if (src) {
          var iframeVideo = $('<iframe>', {
            src: src,
            'class': classTerm,
            frameborder: 0,
            vspace: 0,
            hspace: 0,
            scrolling: 'auto'
          });
          content.html(iframeVideo);
          iframeVideo.load(function () { content.removeClass('nivo-lightbox-loading'); });
        }
      }
      // AJAX
      else if (link.attr('data-lightbox-type') == 'ajax') {
        $.ajax({
          url: href,
          cache: false,
          success: function (data) {
            var wrap = $('<div class="nivo-lightbox-ajax" />');
            wrap.append(data);
            content.html(wrap).removeClass('nivo-lightbox-loading');

            // Vertically center html
            if (wrap.outerHeight() < content.height()) {
              wrap.css({
                'position': 'relative',
                'top': '50%',
                'margin-top': -(wrap.outerHeight() / 2) + 'px'
              });
            }
            $(window).resize(function () {
              if (wrap.outerHeight() < content.height()) {
                wrap.css({
                  'position': 'relative',
                  'top': '50%',
                  'margin-top': -(wrap.outerHeight() / 2) + 'px'
                });
              }
            });
          },
          error: function () {
            var wrap = $('<div class="nivo-lightbox-error"><p>' + $this.options.errorMessage + '</p></div>');
            content.html(wrap).removeClass('nivo-lightbox-loading');
          }
        });
      }
      // Inline HTML
      else if (href.substring(0, 1) == '#' && link.attr('data-lightbox-type') == 'inline') {
        if ($(href).length) {
          var wrap = $('<div class="nivo-lightbox-inline" />');
          wrap.append($(href).clone().show());
          content.html(wrap).removeClass('nivo-lightbox-loading');

          // Vertically center html
          if (wrap.outerHeight() < content.height()) {
            wrap.css({
              'position': 'relative',
              'top': '50%',
              'margin-top': -(wrap.outerHeight() / 2) + 'px'
            });
          }
          $(window).resize(function () {
            if (wrap.outerHeight() < content.height()) {
              wrap.css({
                'position': 'relative',
                'top': '50%',
                'margin-top': -(wrap.outerHeight() / 2) + 'px'
              });
            }
          });
        } else {
          var wrapError = $('<div class="nivo-lightbox-error"><p>' + $this.options.errorMessage + '</p></div>');
          content.html(wrapError).removeClass('nivo-lightbox-loading');
        }
      }
      // iFrame (default)
      else if (link.attr('data-lightbox-type') == 'iframe') {
        var iframe = $('<iframe>', {
          src: href,
          'class': 'nivo-lightbox-item',
          frameborder: 0,
          vspace: 0,
          hspace: 0,
          scrolling: 'auto'
        });
        content.html(iframe);
        iframe.load(function () { content.removeClass('nivo-lightbox-loading'); });
      } else {
        return false;
      }

      // Set the title
      if (link.attr('title')) {
        var titleWrap = $('<span>', { 'class': 'nivo-lightbox-title' });
        titleWrap.text(link.attr('title'));
        $('.nivo-lightbox-title-wrap').html(titleWrap);
      } else {
        $('.nivo-lightbox-title-wrap').html('');
      }
    },

    constructLightbox: function () {
      if ($('.nivo-lightbox-overlay').length) return $('.nivo-lightbox-overlay');

      var overlay = $('<div>', { 'class': 'nivo-lightbox-overlay nivo-lightbox-theme-' + this.options.theme + ' nivo-lightbox-effect-' + this.options.effect });
      var wrap = $('<div>', { 'class': 'nivo-lightbox-wrap' });
      var content = $('<div>', { 'class': 'nivo-lightbox-content' });
      var nav = $('<a href="#" class="nivo-lightbox-nav nivo-lightbox-prev">Previous</a><a href="#" class="nivo-lightbox-nav nivo-lightbox-next">Next</a>');
      var close = $('<a href="#" class="nivo-lightbox-close" title="Close"><i class="icon-close"></i></a>');
      var title = $('<div>', { 'class': 'nivo-lightbox-title-wrap' });

      var isMSIE = /*@cc_on!@*/0;
      if (isMSIE) overlay.addClass('nivo-lightbox-ie');

      wrap.append(content);
      wrap.append(title);
      overlay.append(wrap);
      overlay.append(nav);
      overlay.append(close);
      $('body').append(overlay);

      var $this = this;
      if ($this.options.clickOverlayToClose) {
        overlay.on('click', function (e) {
          if (e.target === this || $(e.target).hasClass('nivo-lightbox-content') || $(e.target).hasClass('nivo-lightbox-image')) {
            $this.destructLightbox();
          }
        });
      }
      if ($this.options.clickImgToClose) {
        overlay.on('click', function (e) {
          if (e.target === this || $(e.target).hasClass('nivo-lightbox-image-display')) {
            $this.destructLightbox();
          }
        });
      }

      close.on('click', function (e) {
        e.preventDefault();
        $this.destructLightbox();
      });

      return overlay;
    },

    destructLightbox: function () {
      var $this = this;
      this.options.beforeHideLightbox.call(this);

      $('.nivo-lightbox-overlay').removeClass('nivo-lightbox-open');
      $('.nivo-lightbox-nav').hide();
      $('body').removeClass('nivo-lightbox-body-effect-' + $this.options.effect);

      // For IE
      var isMSIE = /*@cc_on!@*/0;
      if (isMSIE) {
        $('.nivo-lightbox-overlay iframe').attr("src", " ");
        $('.nivo-lightbox-overlay iframe').remove();
      }

      // Remove click handlers
      $('.nivo-lightbox-prev').off('click');
      $('.nivo-lightbox-next').off('click');

      // Empty content (for videos)
      $('.nivo-lightbox-content').empty();

      this.options.afterHideLightbox.call(this);
    },

    isHidpi: function () {
      var mediaQuery = "(-webkit-min-device-pixel-ratio: 1.5),\
                            (min--moz-device-pixel-ratio: 1.5),\
                            (-o-min-device-pixel-ratio: 3/2),\
                            (min-resolution: 1.5dppx)";
      if (window.devicePixelRatio > 1) return true;
      if (window.matchMedia && window.matchMedia(mediaQuery).matches) return true;
      return false;
    }

  };

  $.fn[pluginName] = function (options) {
    return this.each(function () {
      if (!$.data(this, pluginName)) {
        $.data(this, pluginName, new NivoLightbox(this, options));
      }
    });
  };

})(jQuery, window, document);


!function (t, i, o, e) { function n(i, o) { this.el = i, this.$el = t(this.el), this.options = t.extend({}, l, o), this._defaults = l, this._name = a, this.init() } var a = "nivoLightbox", l = { effect: "fade", theme: "default", keyboardNav: !0, clickImgToClose: !1, clickOverlayToClose: !0, onInit: function () { }, beforeShowLightbox: function () { }, afterShowLightbox: function (t) { }, beforeHideLightbox: function () { }, afterHideLightbox: function () { }, beforePrev: function (t) { }, onPrev: function (t) { }, beforeNext: function (t) { }, onNext: function (t) { }, errorMessage: "The requested content cannot be loaded. Please try again later." }; n.prototype = { init: function () { var i = this; t("html").hasClass("nivo-lightbox-notouch") || t("html").addClass("nivo-lightbox-notouch"), "ontouchstart" in o && t("html").removeClass("nivo-lightbox-notouch"), this.$el.on("click", function (t) { i.showLightbox(t) }), this.options.keyboardNav && t("body").off("keyup").on("keyup", function (o) { var e = o.keyCode ? o.keyCode : o.which; 27 == e && i.destructLightbox(), 37 == e && t(".nivo-lightbox-prev").trigger("click"), 39 == e && t(".nivo-lightbox-next").trigger("click") }), this.options.onInit.call(this) }, showLightbox: function (i) { var o = this, e = this.$el, n = this.checkContent(e); if (n) { i.preventDefault(), this.options.beforeShowLightbox.call(this); var a = this.constructLightbox(); if (a) { var l = a.find(".nivo-lightbox-content"); if (l) { if (t("body").addClass("nivo-lightbox-body-effect-" + this.options.effect), this.processContent(l, e), this.$el.attr("data-lightbox-gallery")) { var h = t('[data-lightbox-gallery="' + this.$el.attr("data-lightbox-gallery") + '"]'); t(".nivo-lightbox-nav").show(), t(".nivo-lightbox-prev").off("click").on("click", function (i) { i.preventDefault(); var n = h.index(e); e = h.eq(n - 1), t(e).length || (e = h.last()), t.when(o.options.beforePrev.call(this, [e])).done(function () { o.processContent(l, e), o.options.onPrev.call(this, [e]) }) }), t(".nivo-lightbox-next").off("click").on("click", function (i) { i.preventDefault(); var n = h.index(e); e = h.eq(n + 1), t(e).length || (e = h.first()), t.when(o.options.beforeNext.call(this, [e])).done(function () { o.processContent(l, e), o.options.onNext.call(this, [e]) }) }) } setTimeout(function () { a.addClass("nivo-lightbox-open"), o.options.afterShowLightbox.call(this, [a]) }, 1) } } } }, checkContent: function (t) { var i = t.attr("href"), o = i.match(/(youtube|youtube-nocookie|youtu|vimeo)\.(com|be)\/(watch\?v=([\w-]+)|([\w-]+))/); return null !== i.match(/\.(jpeg|jpg|gif|png)$/i) || (!!o || ("ajax" == t.attr("data-lightbox-type") || ("#" == i.substring(0, 1) && "inline" == t.attr("data-lightbox-type") || "iframe" == t.attr("data-lightbox-type")))) }, processContent: function (o, e) { var n = this, a = e.attr("href"), l = a.match(/(youtube|youtube-nocookie|youtu|vimeo)\.(com|be)\/(watch\?v=([\w-]+)|([\w-]+))/); if (o.html("").addClass("nivo-lightbox-loading"), this.isHidpi() && e.attr("data-lightbox-hidpi") && (a = e.attr("data-lightbox-hidpi")), null !== a.match(/\.(jpeg|jpg|gif|png)$/i)) { var h = t("<img>", { src: a, class: "nivo-lightbox-image-display" }); h.one("load", function () { var e = t('<div class="nivo-lightbox-image" />'); e.append(h), o.html(e).removeClass("nivo-lightbox-loading"), e.css({ "line-height": t(".nivo-lightbox-content").height() + "px", height: t(".nivo-lightbox-content").height() + "px" }), t(i).resize(function () { e.css({ "line-height": t(".nivo-lightbox-content").height() + "px", height: t(".nivo-lightbox-content").height() + "px" }) }) }).each(function () { this.complete && t(this).load() }), h.error(function () { var i = t('<div class="nivo-lightbox-error"><p>' + n.options.errorMessage + "</p></div>"); o.html(i).removeClass("nivo-lightbox-loading") }) } else if (l) { var s = "", r = "nivo-lightbox-video"; if ("youtube" == l[1] && (s = "//www.youtube.com/embed/" + l[4], r = "nivo-lightbox-youtube"), "youtube-nocookie" == l[1] && (s = a, r = "nivo-lightbox-youtube"), "youtu" == l[1] && (s = "//www.youtube.com/embed/" + l[3], r = "nivo-lightbox-youtube"), "vimeo" == l[1] && (s = "//player.vimeo.com/video/" + l[3], r = "nivo-lightbox-vimeo"), s) { var c = t("<iframe>", { src: s, class: r, frameborder: 0, vspace: 0, hspace: 0, scrolling: "auto" }); o.html(c), c.load(function () { o.removeClass("nivo-lightbox-loading") }) } } else if ("ajax" == e.attr("data-lightbox-type")) t.ajax({ url: a, cache: !1, success: function (e) { var n = t('<div class="nivo-lightbox-ajax" />'); n.append(e), o.html(n).removeClass("nivo-lightbox-loading"), n.outerHeight() < o.height() && n.css({ position: "relative", top: "50%", "margin-top": -(n.outerHeight() / 2) + "px" }), t(i).resize(function () { n.outerHeight() < o.height() && n.css({ position: "relative", top: "50%", "margin-top": -(n.outerHeight() / 2) + "px" }) }) }, error: function () { var i = t('<div class="nivo-lightbox-error"><p>' + n.options.errorMessage + "</p></div>"); o.html(i).removeClass("nivo-lightbox-loading") } }); else if ("#" == a.substring(0, 1) && "inline" == e.attr("data-lightbox-type")) if (t(a).length) { var g = t('<div class="nivo-lightbox-inline" />'); g.append(t(a).clone().show()), o.html(g).removeClass("nivo-lightbox-loading"), g.outerHeight() < o.height() && g.css({ position: "relative", top: "50%", "margin-top": -(g.outerHeight() / 2) + "px" }), t(i).resize(function () { g.outerHeight() < o.height() && g.css({ position: "relative", top: "50%", "margin-top": -(g.outerHeight() / 2) + "px" }) }) } else { var v = t('<div class="nivo-lightbox-error"><p>' + n.options.errorMessage + "</p></div>"); o.html(v).removeClass("nivo-lightbox-loading") } else { if ("iframe" != e.attr("data-lightbox-type")) return !1; var b = t("<iframe>", { src: a, class: "nivo-lightbox-item", frameborder: 0, vspace: 0, hspace: 0, scrolling: "auto" }); o.html(b), b.load(function () { o.removeClass("nivo-lightbox-loading") }) } if (e.attr("title")) { var x = t("<span>", { class: "nivo-lightbox-title" }); x.text(e.attr("title")), t(".nivo-lightbox-title-wrap").html(x) } else t(".nivo-lightbox-title-wrap").html("") }, constructLightbox: function () { if (t(".nivo-lightbox-overlay").length) return t(".nivo-lightbox-overlay"); var i = t("<div>", { class: "nivo-lightbox-overlay nivo-lightbox-theme-" + this.options.theme + " nivo-lightbox-effect-" + this.options.effect }), o = t("<div>", { class: "nivo-lightbox-wrap" }), e = t("<div>", { class: "nivo-lightbox-content" }), n = t('<a href="#" class="nivo-lightbox-nav nivo-lightbox-prev">Previous</a><a href="#" class="nivo-lightbox-nav nivo-lightbox-next">Next</a>'), a = t('<a href="#" class="nivo-lightbox-close" title="Close">Close</a>'), l = t("<div>", { class: "nivo-lightbox-title-wrap" }), h =/*@cc_on!@*/0; h && i.addClass("nivo-lightbox-ie"), o.append(e), o.append(l), i.append(o), i.append(n), i.append(a), t("body").append(i); var s = this; return s.options.clickOverlayToClose && i.on("click", function (i) { (i.target === this || t(i.target).hasClass("nivo-lightbox-content") || t(i.target).hasClass("nivo-lightbox-image")) && s.destructLightbox() }), s.options.clickImgToClose && i.on("click", function (i) { (i.target === this || t(i.target).hasClass("nivo-lightbox-image-display")) && s.destructLightbox() }), a.on("click", function (t) { t.preventDefault(), s.destructLightbox() }), i }, destructLightbox: function () { var i = this; this.options.beforeHideLightbox.call(this), t(".nivo-lightbox-overlay").removeClass("nivo-lightbox-open"), t(".nivo-lightbox-nav").hide(), t("body").removeClass("nivo-lightbox-body-effect-" + i.options.effect); var o =/*@cc_on!@*/0; o && (t(".nivo-lightbox-overlay iframe").attr("src", " "), t(".nivo-lightbox-overlay iframe").remove()), t(".nivo-lightbox-prev").off("click"), t(".nivo-lightbox-next").off("click"), t(".nivo-lightbox-content").empty(), this.options.afterHideLightbox.call(this) }, isHidpi: function () { var t = "(-webkit-min-device-pixel-ratio: 1.5),                              (min--moz-device-pixel-ratio: 1.5),                              (-o-min-device-pixel-ratio: 3/2),                              (min-resolution: 1.5dppx)"; return i.devicePixelRatio > 1 || !(!i.matchMedia || !i.matchMedia(t).matches) } }, t.fn[a] = function (i) { return this.each(function () { t.data(this, a) || t.data(this, a, new n(this, i)) }) } }(jQuery, window, document);

// Select all links with hashes
$('a[href*="#"]')
  // Remove links that don't actually link to anything
  .not('[href="#"]')
  .not('[href="#0"]')
  .click(function (event) {
    // On-page links
    if (
      location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '')
      &&
      location.hostname == this.hostname
    ) {
      // Figure out element to scroll to
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      // Does a scroll target exist?
      if (target.length) {
        // Only prevent default if animation is actually gonna happen
        event.preventDefault();
        $('html, body').animate({
          scrollTop: target.offset().top
        }, 1000, function () {
          // Callback after animation
          // Must change focus!
          var $target = $(target);
          $target.focus();
          if ($target.is(":focus")) { // Checking if the target was focused
            return false;
          } else {
            $target.attr('tabindex', '-1'); // Adding tabindex for elements not focusable
            $target.focus(); // Set focus again
          };
        });
      }
    }
  });




(function () { var t = [].indexOf || function (t) { for (var e = 0, n = this.length; e < n; e++) { if (e in this && this[e] === t) return e } return -1 }, e = [].slice; (function (t, e) { if (typeof define === "function" && define.amd) { return define("waypoints", ["jquery"], function (n) { return e(n, t) }) } else { return e(t.jQuery, t) } })(this, function (n, r) { var i, o, l, s, f, u, a, c, h, d, p, y, v, w, g, m; i = n(r); c = t.call(r, "ontouchstart") >= 0; s = { horizontal: {}, vertical: {} }; f = 1; a = {}; u = "waypoints-context-id"; p = "resize.waypoints"; y = "scroll.waypoints"; v = 1; w = "waypoints-waypoint-ids"; g = "waypoint"; m = "waypoints"; o = function () { function t(t) { var e = this; this.$element = t; this.element = t[0]; this.didResize = false; this.didScroll = false; this.id = "context" + f++; this.oldScroll = { x: t.scrollLeft(), y: t.scrollTop() }; this.waypoints = { horizontal: {}, vertical: {} }; t.data(u, this.id); a[this.id] = this; t.bind(y, function () { var t; if (!(e.didScroll || c)) { e.didScroll = true; t = function () { e.doScroll(); return e.didScroll = false }; return r.setTimeout(t, n[m].settings.scrollThrottle) } }); t.bind(p, function () { var t; if (!e.didResize) { e.didResize = true; t = function () { n[m]("refresh"); return e.didResize = false }; return r.setTimeout(t, n[m].settings.resizeThrottle) } }) } t.prototype.doScroll = function () { var t, e = this; t = { horizontal: { newScroll: this.$element.scrollLeft(), oldScroll: this.oldScroll.x, forward: "right", backward: "left" }, vertical: { newScroll: this.$element.scrollTop(), oldScroll: this.oldScroll.y, forward: "down", backward: "up" } }; if (c && (!t.vertical.oldScroll || !t.vertical.newScroll)) { n[m]("refresh") } n.each(t, function (t, r) { var i, o, l; l = []; o = r.newScroll > r.oldScroll; i = o ? r.forward : r.backward; n.each(e.waypoints[t], function (t, e) { var n, i; if (r.oldScroll < (n = e.offset) && n <= r.newScroll) { return l.push(e) } else if (r.newScroll < (i = e.offset) && i <= r.oldScroll) { return l.push(e) } }); l.sort(function (t, e) { return t.offset - e.offset }); if (!o) { l.reverse() } return n.each(l, function (t, e) { if (e.options.continuous || t === l.length - 1) { return e.trigger([i]) } }) }); return this.oldScroll = { x: t.horizontal.newScroll, y: t.vertical.newScroll } }; t.prototype.refresh = function () { var t, e, r, i = this; r = n.isWindow(this.element); e = this.$element.offset(); this.doScroll(); t = { horizontal: { contextOffset: r ? 0 : e.left, contextScroll: r ? 0 : this.oldScroll.x, contextDimension: this.$element.width(), oldScroll: this.oldScroll.x, forward: "right", backward: "left", offsetProp: "left" }, vertical: { contextOffset: r ? 0 : e.top, contextScroll: r ? 0 : this.oldScroll.y, contextDimension: r ? n[m]("viewportHeight") : this.$element.height(), oldScroll: this.oldScroll.y, forward: "down", backward: "up", offsetProp: "top" } }; return n.each(t, function (t, e) { return n.each(i.waypoints[t], function (t, r) { var i, o, l, s, f; i = r.options.offset; l = r.offset; o = n.isWindow(r.element) ? 0 : r.$element.offset()[e.offsetProp]; if (n.isFunction(i)) { i = i.apply(r.element) } else if (typeof i === "string") { i = parseFloat(i); if (r.options.offset.indexOf("%") > -1) { i = Math.ceil(e.contextDimension * i / 100) } } r.offset = o - e.contextOffset + e.contextScroll - i; if (r.options.onlyOnScroll && l != null || !r.enabled) { return } if (l !== null && l < (s = e.oldScroll) && s <= r.offset) { return r.trigger([e.backward]) } else if (l !== null && l > (f = e.oldScroll) && f >= r.offset) { return r.trigger([e.forward]) } else if (l === null && e.oldScroll >= r.offset) { return r.trigger([e.forward]) } }) }) }; t.prototype.checkEmpty = function () { if (n.isEmptyObject(this.waypoints.horizontal) && n.isEmptyObject(this.waypoints.vertical)) { this.$element.unbind([p, y].join(" ")); return delete a[this.id] } }; return t }(); l = function () { function t(t, e, r) { var i, o; r = n.extend({}, n.fn[g].defaults, r); if (r.offset === "bottom-in-view") { r.offset = function () { var t; t = n[m]("viewportHeight"); if (!n.isWindow(e.element)) { t = e.$element.height() } return t - n(this).outerHeight() } } this.$element = t; this.element = t[0]; this.axis = r.horizontal ? "horizontal" : "vertical"; this.callback = r.handler; this.context = e; this.enabled = r.enabled; this.id = "waypoints" + v++; this.offset = null; this.options = r; e.waypoints[this.axis][this.id] = this; s[this.axis][this.id] = this; i = (o = t.data(w)) != null ? o : []; i.push(this.id); t.data(w, i) } t.prototype.trigger = function (t) { if (!this.enabled) { return } if (this.callback != null) { this.callback.apply(this.element, t) } if (this.options.triggerOnce) { return this.destroy() } }; t.prototype.disable = function () { return this.enabled = false }; t.prototype.enable = function () { this.context.refresh(); return this.enabled = true }; t.prototype.destroy = function () { delete s[this.axis][this.id]; delete this.context.waypoints[this.axis][this.id]; return this.context.checkEmpty() }; t.getWaypointsByElement = function (t) { var e, r; r = n(t).data(w); if (!r) { return [] } e = n.extend({}, s.horizontal, s.vertical); return n.map(r, function (t) { return e[t] }) }; return t }(); d = { init: function (t, e) { var r; if (e == null) { e = {} } if ((r = e.handler) == null) { e.handler = t } this.each(function () { var t, r, i, s; t = n(this); i = (s = e.context) != null ? s : n.fn[g].defaults.context; if (!n.isWindow(i)) { i = t.closest(i) } i = n(i); r = a[i.data(u)]; if (!r) { r = new o(i) } return new l(t, r, e) }); n[m]("refresh"); return this }, disable: function () { return d._invoke(this, "disable") }, enable: function () { return d._invoke(this, "enable") }, destroy: function () { return d._invoke(this, "destroy") }, prev: function (t, e) { return d._traverse.call(this, t, e, function (t, e, n) { if (e > 0) { return t.push(n[e - 1]) } }) }, next: function (t, e) { return d._traverse.call(this, t, e, function (t, e, n) { if (e < n.length - 1) { return t.push(n[e + 1]) } }) }, _traverse: function (t, e, i) { var o, l; if (t == null) { t = "vertical" } if (e == null) { e = r } l = h.aggregate(e); o = []; this.each(function () { var e; e = n.inArray(this, l[t]); return i(o, e, l[t]) }); return this.pushStack(o) }, _invoke: function (t, e) { t.each(function () { var t; t = l.getWaypointsByElement(this); return n.each(t, function (t, n) { n[e](); return true }) }); return this } }; n.fn[g] = function () { var t, r; r = arguments[0], t = 2 <= arguments.length ? e.call(arguments, 1) : []; if (d[r]) { return d[r].apply(this, t) } else if (n.isFunction(r)) { return d.init.apply(this, arguments) } else if (n.isPlainObject(r)) { return d.init.apply(this, [null, r]) } else if (!r) { return n.error("jQuery Waypoints needs a callback function or handler option.") } else { return n.error("The " + r + " method does not exist in jQuery Waypoints.") } }; n.fn[g].defaults = { context: r, continuous: true, enabled: true, horizontal: false, offset: 0, triggerOnce: false }; h = { refresh: function () { return n.each(a, function (t, e) { return e.refresh() }) }, viewportHeight: function () { var t; return (t = r.innerHeight) != null ? t : i.height() }, aggregate: function (t) { var e, r, i; e = s; if (t) { e = (i = a[n(t).data(u)]) != null ? i.waypoints : void 0 } if (!e) { return [] } r = { horizontal: [], vertical: [] }; n.each(r, function (t, i) { n.each(e[t], function (t, e) { return i.push(e) }); i.sort(function (t, e) { return t.offset - e.offset }); r[t] = n.map(i, function (t) { return t.element }); return r[t] = n.unique(r[t]) }); return r }, above: function (t) { if (t == null) { t = r } return h._filter(t, "vertical", function (t, e) { return e.offset <= t.oldScroll.y }) }, below: function (t) { if (t == null) { t = r } return h._filter(t, "vertical", function (t, e) { return e.offset > t.oldScroll.y }) }, left: function (t) { if (t == null) { t = r } return h._filter(t, "horizontal", function (t, e) { return e.offset <= t.oldScroll.x }) }, right: function (t) { if (t == null) { t = r } return h._filter(t, "horizontal", function (t, e) { return e.offset > t.oldScroll.x }) }, enable: function () { return h._invoke("enable") }, disable: function () { return h._invoke("disable") }, destroy: function () { return h._invoke("destroy") }, extendFn: function (t, e) { return d[t] = e }, _invoke: function (t) { var e; e = n.extend({}, s.vertical, s.horizontal); return n.each(e, function (e, n) { n[t](); return true }) }, _filter: function (t, e, r) { var i, o; i = a[n(t).data(u)]; if (!i) { return [] } o = []; n.each(i.waypoints[e], function (t, e) { if (r(i, e)) { return o.push(e) } }); o.sort(function (t, e) { return t.offset - e.offset }); return n.map(o, function (t) { return t.element }) } }; n[m] = function () { var t, n; n = arguments[0], t = 2 <= arguments.length ? e.call(arguments, 1) : []; if (h[n]) { return h[n].apply(null, t) } else { return h.aggregate.call(null, n) } }; n[m].settings = { resizeThrottle: 100, scrollThrottle: 30 }; return i.load(function () { return n[m]("refresh") }) }) }).call(this);
(function () {
  var Util,
    __bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };

  Util = (function () {
    function Util() { }

    Util.prototype.extend = function (custom, defaults) {
      var key, value;
      for (key in custom) {
        value = custom[key];
        if (value != null) {
          defaults[key] = value;
        }
      }
      return defaults;
    };

    Util.prototype.isMobile = function (agent) {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent);
    };

    return Util;

  })();

  this.WOW = (function () {
    WOW.prototype.defaults = {
      boxClass: 'wow',
      animateClass: 'animated',
      offset: 0,
      mobile: true
    };

    function WOW(options) {
      if (options == null) {
        options = {};
      }
      this.scrollCallback = __bind(this.scrollCallback, this);
      this.scrollHandler = __bind(this.scrollHandler, this);
      this.start = __bind(this.start, this);
      this.scrolled = true;
      this.config = this.util().extend(options, this.defaults);
    }

    WOW.prototype.init = function () {
      var _ref;
      this.element = window.document.documentElement;
      this.boxes = this.element.getElementsByClassName(this.config.boxClass);
      if (this.boxes.length) {
        if (this.disabled()) {
          return this.resetStyle();
        } else {
          if ((_ref = document.readyState) === "interactive" || _ref === "complete") {
            return this.start();
          } else {
            return document.addEventListener('DOMContentLoaded', this.start);
          }
        }
      }
    };

    WOW.prototype.start = function () {
      var box, _i, _len, _ref;
      _ref = this.boxes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        this.applyStyle(box, true);
      }
      window.addEventListener('scroll', this.scrollHandler, false);
      window.addEventListener('resize', this.scrollHandler, false);
      return this.interval = setInterval(this.scrollCallback, 50);
    };

    WOW.prototype.stop = function () {
      window.removeEventListener('scroll', this.scrollHandler, false);
      window.removeEventListener('resize', this.scrollHandler, false);
      if (this.interval != null) {
        return clearInterval(this.interval);
      }
    };

    WOW.prototype.show = function (box) {
      this.applyStyle(box);
      return box.className = "" + box.className + " " + this.config.animateClass;
    };

    WOW.prototype.applyStyle = function (box, hidden) {
      var delay, duration, iteration;
      duration = box.getAttribute('data-wow-duration');
      delay = box.getAttribute('data-wow-delay');
      iteration = box.getAttribute('data-wow-iteration');
      return box.setAttribute('style', this.customStyle(hidden, duration, delay, iteration));
    };

    WOW.prototype.resetStyle = function () {
      var box, _i, _len, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        _results.push(box.setAttribute('style', 'visibility: visible;'));
      }
      return _results;
    };

    WOW.prototype.customStyle = function (hidden, duration, delay, iteration) {
      var style;
      style = hidden ? "visibility: hidden; -webkit-animation-name: none; -moz-animation-name: none; animation-name: none;" : "visibility: visible;";
      if (duration) {
        style += "-webkit-animation-duration: " + duration + "; -moz-animation-duration: " + duration + "; animation-duration: " + duration + ";";
      }
      if (delay) {
        style += "-webkit-animation-delay: " + delay + "; -moz-animation-delay: " + delay + "; animation-delay: " + delay + ";";
      }
      if (iteration) {
        style += "-webkit-animation-iteration-count: " + iteration + "; -moz-animation-iteration-count: " + iteration + "; animation-iteration-count: " + iteration + ";";
      }
      return style;
    };

    WOW.prototype.scrollHandler = function () {
      return this.scrolled = true;
    };

    WOW.prototype.scrollCallback = function () {
      var box;
      if (this.scrolled) {
        this.scrolled = false;
        this.boxes = (function () {
          var _i, _len, _ref, _results;
          _ref = this.boxes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            box = _ref[_i];
            if (!(box)) {
              continue;
            }
            if (this.isVisible(box)) {
              this.show(box);
              continue;
            }
            _results.push(box);
          }
          return _results;
        }).call(this);
        if (!this.boxes.length) {
          return this.stop();
        }
      }
    };

    WOW.prototype.offsetTop = function (element) {
      var top;
      top = element.offsetTop;
      while (element = element.offsetParent) {
        top += element.offsetTop;
      }
      return top;
    };

    WOW.prototype.isVisible = function (box) {
      var bottom, offset, top, viewBottom, viewTop;
      offset = box.getAttribute('data-wow-offset') || this.config.offset;
      viewTop = window.pageYOffset;
      viewBottom = viewTop + this.element.clientHeight - offset;
      top = this.offsetTop(box);
      bottom = top + box.clientHeight;
      return top <= viewBottom && bottom >= viewTop;
    };

    WOW.prototype.util = function () {
      return this._util || (this._util = new Util());
    };

    WOW.prototype.disabled = function () {
      return this.config.mobile === false && this.util().isMobile(navigator.userAgent);
    };

    return WOW;

  })();

}).call(this);




particlesJS('particles-js',

  {
    "particles": {
      "number": {
        "value": 80,
        "density": {
          "enable": true,
          "value_area": 800
        }
      },
      "color": {
        "value": "#ffffff"
      },
      "shape": {
        "type": "circle",
        "stroke": {
          "width": 0,
          "color": "#000000"
        },
        "polygon": {
          "nb_sides": 5
        },
        "image": {
          "src": "img/github.svg",
          "width": 100,
          "height": 100
        }
      },
      "opacity": {
        "value": 0.5,
        "random": false,
        "anim": {
          "enable": false,
          "speed": 1,
          "opacity_min": 0.1,
          "sync": false
        }
      },
      "size": {
        "value": 5,
        "random": true,
        "anim": {
          "enable": false,
          "speed": 40,
          "size_min": 0.1,
          "sync": false
        }
      },
      "line_linked": {
        "enable": true,
        "distance": 150,
        "color": "#ffffff",
        "opacity": 0.4,
        "width": 1
      },
      "move": {
        "enable": true,
        "speed": 6,
        "direction": "none",
        "random": false,
        "straight": false,
        "out_mode": "out",
        "attract": {
          "enable": false,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "canvas",
      "events": {
        "onhover": {
          "enable": true,
          "mode": "repulse"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 400,
          "line_linked": {
            "opacity": 1
          }
        },
        "bubble": {
          "distance": 400,
          "size": 40,
          "duration": 2,
          "opacity": 8,
          "speed": 3
        },
        "repulse": {
          "distance": 200
        },
        "push": {
          "particles_nb": 4
        },
        "remove": {
          "particles_nb": 2
        }
      }
    },
    "retina_detect": true,
    "config_demo": {
      "hide_card": false,
      "background_color": "#b61924",
      "background_image": "",
      "background_position": "50% 50%",
      "background_repeat": "no-repeat",
      "background_size": "cover"
    }
  }

);

